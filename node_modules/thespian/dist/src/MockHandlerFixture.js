"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockHandlerFixture = void 0;
const MockedCall_1 = require("./MockedCall");
const MockHandler_1 = require("./MockHandler");
const Thespian_1 = require("./Thespian");
const thespian = "thespian";
class MockHandlerFixture {
    constructor() {
        this.successfulCalls = [];
        this.handler = new MockHandler_1.MockHandler(thespian, this.successfulCalls);
    }
    makeMock(methodName, expectedArguments) {
        const fullName = methodName === "" ? thespian : thespian + "." + methodName;
        const mockedCall = new MockedCall_1.MockedCall(fullName, methodName, expectedArguments, this.successfulCalls);
        this.handler.addCall(mockedCall);
        return mockedCall;
    }
    getMock(methodName) {
        return this.handler.get(undefined, methodName, undefined);
    }
    successes() {
        return this.successfulCalls;
    }
    // This doesn't work with promises, as Mocha.it() does not return a Promise
    static it(name, fn) {
        const thespian = new Thespian_1.Thespian();
        it(name, () => fn(thespian));
        thespian.verify();
    }
}
exports.MockHandlerFixture = MockHandlerFixture;
//# sourceMappingURL=MockHandlerFixture.js.map