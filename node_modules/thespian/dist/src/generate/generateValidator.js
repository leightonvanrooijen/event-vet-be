"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeBuilder = exports.generateValidator = void 0;
const ts = require("typescript");
const getCompiled_1 = require("../compiled/getCompiled");
const Compiled_1 = require("../compiled/Compiled");
const fillTemplate_1 = require("./fillTemplate");
const headerTemplate = `
import { match } from 'mismatched'
`;
const validatorTemplate = `
const validate@{className} = (value: @{className}): MatchResult => 
    validateThat(value).satisfies(@{className}Validator)

export const @{className}Validator = {
@{fieldValidators}
}
`;
const fieldValidatorTemplate = `     @{fieldName}: @{matcher}`;
const generateValidator = (fileName, elementaryClassSet, enumMap) => {
    var cmd = ts.parseCommandLine([fileName]);
    let program = ts.createProgram(cmd.fileNames, cmd.options);
    const sourceFile = program.getSourceFile(fileName);
    const results = [];
    const classDetails = (0, getCompiled_1.getCompiled)(sourceFile, elementaryClassSet, enumMap);
    classDetails.forEach(classDetail => (0, exports.makeBuilder)(classDetail, results));
    if (results.length > 0) {
        return headerTemplate + results.join();
    }
    return '';
};
exports.generateValidator = generateValidator;
const makeBuilder = (compiled, results) => {
    switch (compiled.type) {
        case Compiled_1.CompiledType.ClassType:
            break;
        case Compiled_1.CompiledType.InterfaceType:
            let makeBuilder = false;
            const lowerName = lowerFirst(compiled.name);
            const fieldValidators = [];
            compiled.fields.forEach(field => {
                makeBuilder = true;
                fieldValidators.push((0, fillTemplate_1.fillTemplate)(fieldValidatorTemplate, {
                    fieldName: field.name,
                    matcher: field.resultType.matcher()
                }));
            });
            if (makeBuilder) {
                results.push((0, fillTemplate_1.fillTemplate)(validatorTemplate, {
                    className: compiled.name,
                    fieldValidators: fieldValidators.join('\n')
                }));
            }
            break;
        case Compiled_1.CompiledType.FunctionType:
            break;
    }
};
exports.makeBuilder = makeBuilder;
const lowerFirst = (s) => s.length > 0 ? s.charAt(0).toLowerCase() + s.substring(1) : '';
const upperFirst = (s) => s.length > 0 ? s.charAt(0).toUpperCase() + s.substring(1) : '';
//# sourceMappingURL=generateValidator.js.map