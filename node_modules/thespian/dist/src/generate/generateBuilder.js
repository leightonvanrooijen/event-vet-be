"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeBuilder = exports.generateBuilder = void 0;
const ts = require("typescript");
const getCompiled_1 = require("../compiled/getCompiled");
const Compiled_1 = require("../compiled/Compiled");
const fillTemplate_1 = require("./fillTemplate");
const headerTemplate = ``;
const builderTemplate = `
export class @{className}Builder {
  @{lowerName}: @{className} = {
@{valuePairs}
  }
@{methods}
  to(): @{className} {
     return @{lowerName}
  }
}
`;
const valuePairTemplate = `
     this.@{fieldName} = @{someValue}
`;
const withTemplate = `
  with@{upperFieldName}(@{fieldName}: @{fieldType}): this {
     this.@{lowerClassName}.@{fieldName} = @{fieldName}
     return this
  }
`;
const generateBuilder = (fileName, elementaryClassSet, enumMap) => {
    var cmd = ts.parseCommandLine([fileName]);
    let program = ts.createProgram(cmd.fileNames, cmd.options);
    const sourceFile = program.getSourceFile(fileName);
    const results = [];
    const classDetails = (0, getCompiled_1.getCompiled)(sourceFile, elementaryClassSet, enumMap);
    classDetails.forEach(classDetail => (0, exports.makeBuilder)(classDetail, results));
    if (results.length > 0) {
        return headerTemplate + results.join();
    }
    return '';
};
exports.generateBuilder = generateBuilder;
const makeBuilder = (compiled, results) => {
    switch (compiled.type) {
        case Compiled_1.CompiledType.ClassType:
            break;
        case Compiled_1.CompiledType.InterfaceType:
            let makeBuilder = false;
            const lowerName = lowerFirst(compiled.name);
            const valuePairs = [];
            const methods = [];
            compiled.fields.forEach(field => {
                makeBuilder = true;
                valuePairs.push(`    ${field.name}: ${field.resultType.displayBuilderValue(field.name)},`);
                methods.push((0, fillTemplate_1.fillTemplate)(withTemplate, {
                    upperFieldName: upperFirst(field.name),
                    fieldName: field.name,
                    fieldType: field.resultType.displayType(),
                    lowerClassName: lowerName
                }));
            });
            if (makeBuilder) {
                results.push((0, fillTemplate_1.fillTemplate)(builderTemplate, {
                    className: compiled.name,
                    lowerName: lowerName,
                    valuePairs: valuePairs.join('\n'),
                    methods: methods.join('\n'),
                }));
            }
            break;
        case Compiled_1.CompiledType.FunctionType:
            break;
    }
};
exports.makeBuilder = makeBuilder;
const lowerFirst = (s) => s.length > 0 ? s.charAt(0).toLowerCase() + s.substring(1) : '';
const upperFirst = (s) => s.length > 0 ? s.charAt(0).toUpperCase() + s.substring(1) : '';
//# sourceMappingURL=generateBuilder.js.map