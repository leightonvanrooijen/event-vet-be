import { SuccessfulCall } from "./SuccessfulCall";
import { UnsuccessfulCall } from "./UnsuccessfulCall";
export declare class MockedCall<U> {
    fullName: string;
    methodName: string;
    private successfulCalls;
    private expectedArgs;
    private expectedTimesInProgress;
    private expectedTimes;
    private actualTimes;
    constructor(fullName: string, methodName: string, expectedArguments: Array<any>, successfulCalls: Array<SuccessfulCall>, expectedArgs?: any);
    returns(fn: (...args: Array<any>) => U): this;
    returnsVoid(): this;
    times(count: number): this;
    timesAtLeast(count: number): this;
    timesAtMost(count: number): this;
    matchToRunResult(actualArgs: Array<any>): RunResult;
    makeNearMiss(matchResult: any, actualTimes: number): {
        failed: UnsuccessfulCall;
    };
    hasRun(): boolean;
    hasPassed(): boolean;
    describe(): {
        call: object;
        expectedTimes: any;
        actualTimes: number;
    };
    private returnFn;
}
export interface RunResult {
    result?: any;
    failed?: UnsuccessfulCall;
}
