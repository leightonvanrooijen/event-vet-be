export interface TType {
    isPrimitive(): boolean;
    displayType(): string;
    displayMockOrValue(fieldName: string): string;
    displayBuilderValue(fieldName: string): string;
    matcher(): string;
}
export declare class TString implements TType {
    constructor();
    isPrimitive(): boolean;
    displayType(): string;
    displayMockOrValue(fieldName: string): string;
    displayBuilderValue(fieldName: string): string;
    matcher(): string;
}
export declare class TNumber implements TType {
    constructor();
    isPrimitive(): boolean;
    displayType(): string;
    displayMockOrValue(fieldName: string): string;
    displayBuilderValue(fieldName: string): string;
    matcher(): string;
}
export declare class TBoolean implements TType {
    constructor();
    isPrimitive(): boolean;
    displayType(): string;
    displayMockOrValue(fieldName: string): string;
    displayBuilderValue(fieldName: string): string;
    matcher(): string;
}
export declare class TEnum implements TType {
    private enumName;
    private defaultValueName;
    constructor(enumName: string, defaultValueName: string);
    isPrimitive(): boolean;
    displayType(): string;
    displayMockOrValue(fieldName: string): string;
    displayBuilderValue(fieldName: string): string;
    matcher(): string;
}
export declare class TBuiltInClass implements TType {
    private typeName;
    constructor(typeName: string);
    isPrimitive(): boolean;
    displayType(): string;
    displayMockOrValue(fieldName: string): string;
    displayBuilderValue(fieldName: string): string;
    matcher(): string;
}
export declare class TClass implements TType {
    private name;
    private generics;
    constructor(name: string, generics?: TGenericArgument[]);
    isPrimitive(): boolean;
    displayType(): string;
    displayMockOrValue(fieldName: string): string;
    displayBuilderValue(fieldName: string): string;
    matcher(): string;
}
export declare class TGenericArgument implements TType {
    private type;
    private generics;
    constructor(type: TType, generics?: TGenericArgument[]);
    isPrimitive(): boolean;
    displayType(): string;
    displayMockOrValue(fieldName: string): string;
    displayBuilderValue(fieldName: string): string;
    matcher(): string;
}
export declare class TGenericParameter implements TType {
    private name;
    constructor(name: string);
    isPrimitive(): boolean;
    displayType(): string;
    displayMockOrValue(fieldName: string): string;
    displayBuilderValue(fieldName: string): string;
    matcher(): string;
}
export declare class TArray implements TType {
    private elementType;
    constructor(elementType: TType);
    isPrimitive(): boolean;
    displayType(): string;
    displayMockOrValue(fieldName: string): string;
    displayBuilderValue(fieldName: string): string;
    matcher(): string;
}
export declare class TTuple implements TType {
    private elements;
    constructor(elements: TType[]);
    isPrimitive(): boolean;
    displayType(): string;
    displayMockOrValue(fieldName: string): string;
    displayBuilderValue(fieldName: string): string;
    matcher(): string;
}
export declare class TUnion implements TType {
    private elements;
    constructor(elements: TType[]);
    isPrimitive(): boolean;
    displayType(): string;
    displayMockOrValue(fieldName: string): string;
    displayBuilderValue(fieldName: string): string;
    matcher(): string;
}
export declare class TIntersection implements TType {
    private elements;
    constructor(elements: TType[]);
    isPrimitive(): boolean;
    displayType(): string;
    displayMockOrValue(fieldName: string): string;
    displayBuilderValue(fieldName: string): string;
    matcher(): string;
}
export declare class TArrow implements TType {
    private parameters;
    private resultType;
    constructor(parameters: TParam[], resultType: TType);
    isPrimitive(): boolean;
    displayType(): string;
    displayMockOrValue(fieldName: string): string;
    displayBuilderValue(fieldName: string): string;
    matcher(): string;
}
export declare class TVoid implements TType {
    constructor();
    isPrimitive(): boolean;
    displayType(): string;
    displayMockOrValue(fieldName: string): string;
    displayBuilderValue(fieldName: string): string;
    matcher(): string;
}
export declare class TUnknown implements TType {
    private kind;
    constructor(kind: number);
    isPrimitive(): boolean;
    displayType(): string;
    displayMockOrValue(fieldName: string): string;
    displayBuilderValue(fieldName: string): string;
    matcher(): string;
}
export declare class TParam {
    name: string;
    type: TType;
    constructor(name: string, type: TType);
    isPrimitive(): boolean;
    displayType(): string;
    displayLet(): string;
    displayInitialiser(): string;
    displayMockOrValue(): string;
    displayFormalParameter(): string;
}
