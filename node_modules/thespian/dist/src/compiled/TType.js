"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TParam = exports.TUnknown = exports.TVoid = exports.TArrow = exports.TIntersection = exports.TUnion = exports.TTuple = exports.TArray = exports.TGenericParameter = exports.TGenericArgument = exports.TClass = exports.TBuiltInClass = exports.TEnum = exports.TBoolean = exports.TNumber = exports.TString = void 0;
class TString {
    constructor() {
    }
    isPrimitive() {
        return true;
    }
    displayType() {
        return "string";
    }
    displayMockOrValue(fieldName) {
        return '""';
    }
    displayBuilderValue(fieldName) {
        return `someBuilder.string("${fieldName}")`;
    }
    matcher() {
        return "match.ofType.string()";
    }
}
exports.TString = TString;
class TNumber {
    constructor() {
    }
    isPrimitive() {
        return true;
    }
    displayType() {
        return "number";
    }
    displayMockOrValue(fieldName) {
        return '0';
    }
    displayBuilderValue(fieldName) {
        return "someBuilder.number()";
    }
    matcher() {
        return "match.ofType.number()";
    }
}
exports.TNumber = TNumber;
class TBoolean {
    constructor() {
    }
    isPrimitive() {
        return true;
    }
    displayType() {
        return "boolean";
    }
    displayMockOrValue(fieldName) {
        return 'true';
    }
    displayBuilderValue(fieldName) {
        return "someBuilder.boolean()";
    }
    matcher() {
        return "match.ofType.boolean()";
    }
}
exports.TBoolean = TBoolean;
class TEnum {
    constructor(enumName, defaultValueName) {
        this.enumName = enumName;
        this.defaultValueName = defaultValueName;
    }
    isPrimitive() {
        return true;
    }
    displayType() {
        return this.enumName;
    }
    displayMockOrValue(fieldName) {
        return `${this.enumName}.${this.defaultValueName}`;
    }
    displayBuilderValue(fieldName) {
        return `someBuilder.enum(${this.enumName})`;
    }
    matcher() {
        return `match.ofType.enum(${this.enumName})`;
    }
}
exports.TEnum = TEnum;
class TBuiltInClass {
    constructor(typeName) {
        this.typeName = typeName;
    }
    isPrimitive() {
        return true;
    }
    displayType() {
        return this.typeName;
    }
    displayMockOrValue(fieldName) {
        return `new ${this.typeName}()`;
    }
    displayBuilderValue(fieldName) {
        if (this.typeName === 'Date')
            return `someBuilder.date()`;
        return `new ${this.typeName}Builder().to()`;
    }
    matcher() {
        return `match.instanceOf(${this.typeName})`;
    }
}
exports.TBuiltInClass = TBuiltInClass;
class TClass {
    constructor(name, generics = []) {
        this.name = name;
        this.generics = generics;
    }
    isPrimitive() {
        return false;
    }
    displayType() {
        if (this.generics.length > 0) {
            return `${this.name}<${this.generics.map(g => g.displayType()).join(', ')}>`;
        }
        return this.name;
    }
    displayMockOrValue(fieldName) {
        return fieldName + '.object';
    }
    displayBuilderValue(fieldName) {
        return `new ${this.name}Builder().to()`;
    }
    matcher() {
        return `${this.name}Validator`;
    }
}
exports.TClass = TClass;
class TGenericArgument {
    constructor(type, generics = []) {
        this.type = type;
        this.generics = generics;
    }
    isPrimitive() {
        return false;
    }
    displayType() {
        if (this.generics.length > 0) {
            return `${this.type.displayType()}<${this.generics.map(g => g.displayType()).join(', ')}>`;
        }
        return this.type.displayType();
    }
    displayMockOrValue(fieldName) {
        return this.displayType();
    }
    displayBuilderValue(fieldName) {
        return ``;
    }
    matcher() {
        return ``;
    }
}
exports.TGenericArgument = TGenericArgument;
class TGenericParameter {
    constructor(name) {
        this.name = name;
    }
    isPrimitive() {
        return false;
    }
    displayType() {
        return this.name;
    }
    displayMockOrValue(fieldName) {
        return this.name;
    }
    displayBuilderValue(fieldName) {
        return ``;
    }
    matcher() {
        return ``;
    }
}
exports.TGenericParameter = TGenericParameter;
class TArray {
    constructor(elementType) {
        this.elementType = elementType;
    }
    isPrimitive() {
        return this.elementType.isPrimitive();
    }
    displayType() {
        return this.elementType.displayType() + '[]';
    }
    displayMockOrValue(fieldName) {
        return `[${this.elementType.displayMockOrValue(fieldName)}]`;
    }
    displayBuilderValue(fieldName) {
        return `[${this.elementType.displayBuilderValue(fieldName)}]`;
    }
    matcher() {
        return `match.array.every(${this.elementType.matcher()})`;
    }
}
exports.TArray = TArray;
class TTuple {
    constructor(elements) {
        this.elements = elements;
    }
    isPrimitive() {
        return this.elements.every(e => e.isPrimitive());
    }
    displayType() {
        return '[' + this.elements.map(e => e.displayType()) + ']';
    }
    displayMockOrValue(fieldName) {
        return `[${this.elements.map(e => e.displayMockOrValue(fieldName)).join(', ')}]`;
    }
    displayBuilderValue(fieldName) {
        return `[${this.elements.map(e => e.displayBuilderValue(fieldName)).join(', ')}]`;
    }
    matcher() {
        return `[${this.elements.map(e => e.matcher()).join(', ')}]`;
    }
}
exports.TTuple = TTuple;
class TUnion {
    constructor(elements) {
        this.elements = elements;
    }
    isPrimitive() {
        return this.elements.every(e => e.isPrimitive());
    }
    displayType() {
        return this.elements.map(e => e.displayType()).join(' | ');
    }
    displayMockOrValue(fieldName) {
        return this.elements[0].displayMockOrValue(fieldName);
    }
    displayBuilderValue(fieldName) {
        return this.elements[0].displayBuilderValue(fieldName);
    }
    matcher() {
        return `match.anyOf([${this.elements.map(e => e.matcher()).join(', ')}])`;
    }
}
exports.TUnion = TUnion;
class TIntersection {
    constructor(elements) {
        this.elements = elements;
    }
    isPrimitive() {
        return this.elements.every(e => e.isPrimitive());
    }
    displayType() {
        return this.elements.map(e => e.displayType()).join(' & ');
    }
    displayMockOrValue(fieldName) {
        return this.elements[0].displayMockOrValue(fieldName);
    }
    displayBuilderValue(fieldName) {
        return this.elements[0].displayBuilderValue(fieldName);
    }
    matcher() {
        return `match.allOf([${this.elements.map(e => e.matcher()).join(', ')}])`;
    }
}
exports.TIntersection = TIntersection;
class TArrow {
    constructor(parameters, resultType) {
        this.parameters = parameters;
        this.resultType = resultType;
    }
    isPrimitive() {
        return false;
    }
    displayType() {
        return `(${this.parameters.map(p => p.displayType()).join(', ')}) => ${this.resultType.displayType()}`;
    }
    displayMockOrValue(fieldName) {
        return fieldName + '.object';
    }
    displayBuilderValue(fieldName) {
        const formalParameters = this.parameters.map(p => p.displayFormalParameter()).join(', ');
        const resultParameters = this.parameters.map(p => p.name).join(', ');
        const result = this.resultType.displayBuilderValue(`${fieldName}(${resultParameters})`);
        return `(${formalParameters}) => ${result}`;
    }
    matcher() {
        return `match.ofType.function()`;
    }
}
exports.TArrow = TArrow;
class TVoid {
    constructor() {
    }
    isPrimitive() {
        return true;
    }
    displayType() {
        return `void`;
    }
    displayMockOrValue(fieldName) {
        return '';
    }
    displayBuilderValue(fieldName) {
        return '';
    }
    matcher() {
        return `match.any()`;
    }
}
exports.TVoid = TVoid;
class TUnknown {
    constructor(kind) {
        this.kind = kind;
    }
    isPrimitive() {
        return true;
    }
    displayType() {
        return `UNKNOWN(${this.kind})`;
    }
    displayMockOrValue(fieldName) {
        return this.displayType();
    }
    displayBuilderValue(fieldName) {
        return '';
    }
    matcher() {
        return `match.any()`;
    }
}
exports.TUnknown = TUnknown;
class TParam {
    constructor(name, type) {
        this.name = name;
        this.type = type;
    }
    isPrimitive() {
        return this.type.isPrimitive();
    }
    displayType() {
        return this.name + ": " + this.type.displayType();
    }
    displayLet() {
        return `\n  let ${this.name}: TMocked<${this.type.displayType()}>`;
    }
    displayInitialiser() {
        return `\n    ${this.name} = thespian.mock<${this.type.displayType()}>("${this.name}")`;
    }
    displayMockOrValue() {
        return this.type.displayMockOrValue(this.name);
    }
    displayFormalParameter() {
        return `${this.name}: ${this.type.displayType()}`;
    }
}
exports.TParam = TParam;
//# sourceMappingURL=TType.js.map