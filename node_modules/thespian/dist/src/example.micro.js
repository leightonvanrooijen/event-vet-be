"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Thespian_1 = require("./Thespian");
const mismatched_1 = require("mismatched");
describe("Thespian By Example", () => {
    let thespian;
    beforeEach(() => {
        thespian = new Thespian_1.Thespian();
    });
    afterEach(() => thespian.verify());
    it("We can call a mocked method several times", () => {
        const mock = thespian.mock("aTell");
        mock
            .setup(f => f.tellAll("elisa", 2))
            .returns(() => 44)
            .times(2);
        const mocked = mock.object;
        (0, mismatched_1.assertThat)(mocked.tellAll("elisa", 2)).is(44);
        (0, mismatched_1.assertThat)(mocked.tellAll("elisa", 2)).is(44);
    });
    it("Sophisticated matching of mock arguments", () => {
        const mockCheck = thespian.mock("check");
        mockCheck
            .setup(f => f.match({
            matchId: 0,
            matches: [{
                    match_type: mismatched_1.match.string.startsWith("full"),
                    links: mismatched_1.match.array.length(1)
                }]
        }))
            .returns(() => Math.random());
        const check = mockCheck.object;
        (0, mismatched_1.assertThat)(check.match({
            matchId: 0,
            matches: [{
                    match_type: "full-match",
                    links: ["REL"]
                }]
        })).is(mismatched_1.match.ofType.number());
    });
    it("mocking a function", () => {
        let mockFn = thespian.mock("fn");
        mockFn
            .setup(g => g(2))
            .returns(() => 33);
        thespian.describeMocks();
        (0, mismatched_1.assertThat)(mockFn.object(2)).is(33);
        thespian.describeMocks();
    });
});
//# sourceMappingURL=example.micro.js.map