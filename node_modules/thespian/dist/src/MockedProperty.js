"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockedProperty = void 0;
const mismatched_1 = require("mismatched");
const SuccessfulCall_1 = require("./SuccessfulCall");
const UnsuccessfulAccess_1 = require("./UnsuccessfulAccess");
const matchMaker_1 = require("mismatched/dist/src/matchMaker/matchMaker");
class MockedProperty {
    constructor(fullName, propertyName, successfulCalls) {
        this.fullName = fullName;
        this.propertyName = propertyName;
        this.successfulCalls = successfulCalls;
        this.expectedTimesInProgress = mismatched_1.match.isEquals(1);
        this.expectedTimes = mismatched_1.match.isEquals(1);
        this.actualTimes = 0;
    }
    returns(fn) {
        this.returnFn = fn;
        return this;
    }
    returnsVoid() {
        throw new Error("An object property needs to return some value");
    }
    times(count) {
        this.expectedTimes = (0, matchMaker_1.matchMaker)(count);
        this.expectedTimesInProgress = mismatched_1.match.number.lessEqual(count);
        return this;
    }
    timesAtLeast(count) {
        this.expectedTimes = mismatched_1.match.number.greaterEqual(count);
        this.expectedTimesInProgress = mismatched_1.match.number.greaterEqual(count);
        return this;
    }
    timesAtMost(count) {
        this.expectedTimes = mismatched_1.match.number.lessEqual(count);
        this.expectedTimesInProgress = mismatched_1.match.number.lessEqual(count);
        return this;
    }
    access() {
        const timesCorrect = this.expectedTimesInProgress.matches(this.actualTimes + 1).passed();
        if (timesCorrect) {
            const result = this.returnFn();
            this.actualTimes += 1;
            this.successfulCalls.push(SuccessfulCall_1.SuccessfulCall.ofProperty(this.fullName, result, this.expectedTimes.describe()));
            return { result };
        }
        const failed = UnsuccessfulAccess_1.UnsuccessfulAccess.make(this.fullName, this.expectedTimes.describe(), this.actualTimes + 1);
        return { failed };
    }
    hasRun() {
        return this.actualTimes > 0;
    }
    hasPassed() {
        return this.expectedTimes.matches(this.actualTimes).passed();
    }
    describe() {
        return UnsuccessfulAccess_1.UnsuccessfulAccess.make(this.fullName, 0, this.actualTimes).describe();
    }
}
exports.MockedProperty = MockedProperty;
//# sourceMappingURL=MockedProperty.js.map