import { MockedCall } from "./MockedCall";
import { SuccessfulCall } from "./SuccessfulCall";
import { MockedProperty } from "./MockedProperty";
export declare const minimumMatchRateForNearMiss = 0.2;
export declare class MockHandler implements ProxyHandler<{}> {
    private mockName;
    private successfulCalls;
    static applyKey: string;
    mapMethodToMockCalls: Map<PropertyKey, MockedCall<any>[]>;
    mapPropertyToFunctions: Map<PropertyKey, MockedProperty<any>[]>;
    constructor(mockName: string, successfulCalls: Array<SuccessfulCall>);
    addCall(mockCall: MockedCall<any>): void;
    addProperty(mockedProperty: MockedProperty<any>): void;
    get(target: any, propKey: string | number | symbol, receiver: any): any;
    apply(target: any, thisArg: any, actualArguments: Array<any>): any;
    error(msg: any): void;
    has(target: any, propKey: string): boolean;
    set(target: any, propKey: string, value: any): boolean;
    deleteProperty(target: any, propKey: string): boolean;
    getOwnPropertyDescriptor(target: any, prop: string | number | symbol): PropertyDescriptor | undefined;
    verify(errors: Array<any>): void;
    describeMocks(): Array<any>;
    private accessProperty;
    private runRightCall;
    private failedToMatch;
}
