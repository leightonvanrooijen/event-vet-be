"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SelfReferenceChecker_1 = require("./SelfReferenceChecker");
const assertThat_1 = require("../assertThat");
const match_1 = require("../match");
describe("SelfReferenceChecker", () => {
    it("finds no self reference", () => {
        const checker = new SelfReferenceChecker_1.SelfReferenceChecker();
        (0, assertThat_1.assertThat)(checker.recurse("this", 4, () => 5)).is(5);
    });
    it("finds a direct self reference within an object", () => {
        const checker = new SelfReferenceChecker_1.SelfReferenceChecker();
        const obj = {};
        obj.f = obj;
        (0, assertThat_1.assertThat)(checker.recurse("this", obj, () => obj)).is(match_1.match.any());
        (0, assertThat_1.assertException)(() => checker.recurse("this", obj, () => checker.recurse("this.f", obj.f, () => 4)))
            .catchWithMessage(SelfReferenceChecker_1.SelfReferenceChecker.colouredMessage("this"));
    });
    it("finds an indirect self reference within an object", () => {
        const checker = new SelfReferenceChecker_1.SelfReferenceChecker();
        const obj = {};
        obj.f = { g: obj };
        (0, assertThat_1.assertThat)(checker.recurse("this", obj, () => checker.recurse("this.f", obj.f, () => 4))).is(match_1.match.any());
        (0, assertThat_1.assertException)(() => checker.recurse("this", obj, () => checker.recurse("this.f", obj.f, () => checker.recurse("this.f.g", obj.f.g, () => 4))))
            .catchWithMessage(SelfReferenceChecker_1.SelfReferenceChecker.colouredMessage("this"));
    });
    it("finds a direct self reference within an array", () => {
        const checker = new SelfReferenceChecker_1.SelfReferenceChecker();
        const obj = [];
        obj.push(obj);
        (0, assertThat_1.assertThat)(checker.recurse("this", obj, () => obj)).is(match_1.match.any());
        (0, assertThat_1.assertException)(() => checker.recurse("this", obj, () => checker.recurse("this[0]", obj[0], () => 4)))
            .catchWithMessage(SelfReferenceChecker_1.SelfReferenceChecker.colouredMessage("this"));
    });
    it("finds an indirect self reference within a nested array", () => {
        const checker = new SelfReferenceChecker_1.SelfReferenceChecker();
        const obj = [];
        obj.push([obj]);
        (0, assertThat_1.assertThat)(checker.recurse("this", obj, () => checker.recurse("this[0]", obj[0], () => 4))).is(match_1.match.any());
        (0, assertThat_1.assertException)(() => checker.recurse("this", obj, () => checker.recurse("this[0]", obj[0], () => checker.recurse("this[0][0]", obj[0][0], () => 4))))
            .catchWithMessage(SelfReferenceChecker_1.SelfReferenceChecker.colouredMessage("this"));
    });
    it("finds an indirect self reference within a nested array 2", () => {
        const checker = new SelfReferenceChecker_1.SelfReferenceChecker();
        const obj = [[1]];
        obj[0].push([obj[0]]);
        (0, assertThat_1.assertException)(() => checker.recurse("this", obj, () => checker.recurse("this[0]", obj[0], () => checker.recurse("this[0][1]", obj[0][1], () => checker.recurse("this[0][1][0]", obj[0][1][0], () => 4)))))
            .catchWithMessage(SelfReferenceChecker_1.SelfReferenceChecker.colouredMessage("this[0]"));
    });
});
//# sourceMappingURL=SelfReferenceChecker.micro.js.map