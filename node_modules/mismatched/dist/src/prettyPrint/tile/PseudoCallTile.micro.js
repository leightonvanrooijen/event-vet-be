"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertThat_1 = require("../../assertThat");
const Appender_1 = require("../Appender");
const SimpleTile_1 = require("./SimpleTile");
const PseudoCallTile_1 = require("./PseudoCallTile");
describe("PseudoCallTile", () => {
    it("Undefined arguments", () => {
        const arrayTile = new PseudoCallTile_1.PseudoCallTile("target.meth", undefined);
        (0, assertThat_1.assertThat)(arrayTile).is({ callName: "target.meth", stringLength: 3, complexity: 1, withSquareBrackets: false });
        (0, assertThat_1.assertThat)(Appender_1.Appender.composeTile(arrayTile)).is("target.meth");
    });
    it("No arguments", () => {
        const arrayTile = new PseudoCallTile_1.PseudoCallTile("target.meth", []);
        (0, assertThat_1.assertThat)(arrayTile).is({ callName: "target.meth", args: [], stringLength: 11, complexity: 3, withSquareBrackets: false });
        (0, assertThat_1.assertThat)(Appender_1.Appender.composeTile(arrayTile)).is("target.meth()");
    });
    it("One argument", () => {
        const tile = new SimpleTile_1.SimpleTile([1, 2, 3]);
        const arrayTile = new PseudoCallTile_1.PseudoCallTile("fn", [tile]);
        (0, assertThat_1.assertThat)(arrayTile).is({ callName: "fn", args: [tile], stringLength: 9, complexity: 4, withSquareBrackets: false });
        (0, assertThat_1.assertThat)(Appender_1.Appender.composeTile(arrayTile)).is('fn(1,2,3)');
    });
    it("Three arguments", () => {
        const tile1 = new SimpleTile_1.SimpleTile([1, 2, 3]);
        const tile2 = new SimpleTile_1.SimpleTile(4);
        const tile3 = new SimpleTile_1.SimpleTile(true);
        const arrayTile = new PseudoCallTile_1.PseudoCallTile("dateTime.plusDays", [tile1, tile2, tile3]);
        (0, assertThat_1.assertThat)(arrayTile).is({
            callName: "dateTime.plusDays",
            args: [tile1, tile2, tile3],
            stringLength: 33,
            complexity: 6,
            withSquareBrackets: false
        });
        (0, assertThat_1.assertThat)(Appender_1.Appender.composeTile(arrayTile)).is("dateTime.plusDays(1,2,3, 4, true)");
    });
    it("Three arguments with square brackets", () => {
        const tile1 = new SimpleTile_1.SimpleTile([1, 2, 3]);
        const tile2 = new SimpleTile_1.SimpleTile(4);
        const tile3 = new SimpleTile_1.SimpleTile(true);
        const arrayTile = new PseudoCallTile_1.PseudoCallTile("dateTime.plusDays", [tile1, tile2, tile3], true);
        (0, assertThat_1.assertThat)(arrayTile).is({
            callName: "dateTime.plusDays",
            args: [tile1, tile2, tile3],
            stringLength: 33,
            complexity: 6,
            withSquareBrackets: true
        });
        (0, assertThat_1.assertThat)(Appender_1.Appender.composeTile(arrayTile)).is("dateTime.plusDays([1,2,3, 4, true])");
    });
});
//# sourceMappingURL=PseudoCallTile.micro.js.map