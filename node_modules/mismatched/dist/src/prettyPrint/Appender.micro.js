"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Appender_1 = require("./Appender");
const assertThat_1 = require("../assertThat");
describe("Appender()", () => {
    const lineWidth = 20;
    let appender;
    beforeEach(() => {
        appender = new Appender_1.Appender(lineWidth);
    });
    it("initially", () => {
        (0, assertThat_1.assertThat)(appender.compose()).is("");
        (0, assertThat_1.assertThat)(appender.remaininglineWidth).is(lineWidth);
        (0, assertThat_1.assertThat)(appender.currentLineComplexity).is(0);
    });
    it("one line", () => {
        let text = "Hello";
        appender.add(text, 1);
        (0, assertThat_1.assertThat)(appender.remaininglineWidth).is(lineWidth - text.length);
        (0, assertThat_1.assertThat)(appender.currentLineComplexity).is(1);
        (0, assertThat_1.assertThat)(appender.compose()).is(text);
    });
    it("2 parts", () => {
        appender.add("Hello", 1);
        appender.add(" ");
        (0, assertThat_1.assertThat)(appender.remaininglineWidth).is(lineWidth - "Hello ".length);
        appender.add("World", 1);
        (0, assertThat_1.assertThat)(appender.remaininglineWidth).is(lineWidth - "Hello World".length);
        (0, assertThat_1.assertThat)(appender.currentLineComplexity).is(2);
        (0, assertThat_1.assertThat)(appender.compose()).is("Hello World");
    });
    it("2 parts at once", () => {
        appender.adds(["Hello", " ", "World"], 3);
        (0, assertThat_1.assertThat)(appender.remaininglineWidth).is(lineWidth - "Hello World".length);
        (0, assertThat_1.assertThat)(appender.currentLineComplexity).is(3);
        (0, assertThat_1.assertThat)(appender.compose()).is("Hello World");
    });
    it("2 lines", () => {
        appender.addsNewLine(["Hello"], 1);
        appender.add("World", 1);
        (0, assertThat_1.assertThat)(appender.currentLineComplexity).is(1);
        (0, assertThat_1.assertThat)(appender.compose()).is("Hello\nWorld");
    });
    it("2 lines with tabs", () => {
        appender.tabRight();
        (0, assertThat_1.assertThat)(appender.remaininglineWidth).is(lineWidth - 2);
        appender.addsNewLine(["Hello"]);
        (0, assertThat_1.assertThat)(appender.remaininglineWidth).is(lineWidth - 2);
        appender.add("World");
        (0, assertThat_1.assertThat)(appender.remaininglineWidth).is(lineWidth - "  World".length);
        (0, assertThat_1.assertThat)(appender.compose()).is("  Hello\n  World");
    });
    it("2 lines with tab in and then out", () => {
        appender.tabRight();
        appender.addsNewLine(["Hello"]);
        appender.tabLeft();
        (0, assertThat_1.assertThat)(appender.remaininglineWidth).is(lineWidth);
        appender.add("World");
        (0, assertThat_1.assertThat)(appender.compose()).is("  Hello\nWorld");
    });
});
//# sourceMappingURL=Appender.micro.js.map