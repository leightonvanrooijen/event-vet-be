"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleSymbol = exports.MatchResult = void 0;
const ofType_1 = require("./ofType");
const PrettyPrinter_1 = require("./prettyPrint/PrettyPrinter");
const Colour_1 = require("./Colour");
class MatchResult {
    constructor(diff, compares, matches, matchedObjectKey = false) {
        this.diff = diff;
        this.compares = compares;
        this.matches = matches;
        this.matchedObjectKey = matchedObjectKey;
        this.matchRate = compares === 0 ? 0.0 : matches / compares;
    }
    static useConsoleLogging() {
        MatchResult.consoleLogging = true;
    }
    static wasExpected(was, expected, compares, matches) {
        return new MatchResult({
            [MatchResult.was]: handleSymbol(was),
            [MatchResult.expected]: handleSymbol(expected)
        }, compares, matches);
    }
    static describe(description) {
        return handleSymbol(description);
    }
    static good(compares, matchedObjectKey = false) {
        return new MatchResult({}, compares, compares, matchedObjectKey);
    }
    passed() {
        return this.matchRate >= 1.0;
    }
    bad(actual, message = "Mismatched") {
        const diff = PrettyPrinter_1.PrettyPrinter.make().render({ actual, diff: this.diff });
        if (MatchResult.consoleLogging) {
            console.log(diff);
            throw new Error(message);
        }
        else {
            throw new Error(message + ":\n" + diff);
        }
    }
    differ(items) {
        if (items.length > 0) {
            if (items.length === 1) {
                this.diff[MatchResult.differ] = items[0];
            }
            else {
                this.diff[MatchResult.differ] = items;
            }
        }
        return this;
    }
    unexpected(items) {
        if (items.length > 0) {
            if (items.length === 1) {
                this.diff[MatchResult.unexpected] = items[0];
            }
            else {
                this.diff[MatchResult.unexpected] = items;
            }
        }
        return this;
    }
}
exports.MatchResult = MatchResult;
MatchResult.consoleLogging = false;
MatchResult.was = Colour_1.Colour.bg_cyan("     was");
MatchResult.expected = Colour_1.Colour.bg_cyan("expected");
MatchResult.unexpected = Colour_1.Colour.bg_cyan("unexpected");
MatchResult.differ = Colour_1.Colour.bg_cyan("  differ");
function handleSymbol(v) {
    if (ofType_1.ofType.isSymbol(v)) {
        return v.toString();
    }
    return v;
}
exports.handleSymbol = handleSymbol;
//# sourceMappingURL=MatchResult.js.map