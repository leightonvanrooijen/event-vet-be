"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertThat_1 = require("../assertThat");
const match_1 = require("../match");
const MatchResult_1 = require("../MatchResult");
const DiffMatcher_1 = require("./DiffMatcher");
const validateThat_1 = require("../validateThat");
describe("PredicateMatcher:", () => {
    const matcher = match_1.match.predicate(v => v > 0);
    describe("assertThat():", () => {
        it("Matches", () => {
            (0, assertThat_1.assertThat)(5).is(matcher);
            (0, assertThat_1.assertThat)({ a: 2 }).is(match_1.match.predicate(v => v.a === 2));
        });
        it("Mismatches", () => {
            (0, assertThat_1.assertThat)("ab")
                .failsWith(match_1.match.predicate(pred), {
                [MatchResult_1.MatchResult.was]: "ab",
                [MatchResult_1.MatchResult.expected]: { predicateFailed: { "function": "pred()" } }
            });
            (0, assertThat_1.assertThat)("ab")
                .failsWith(match_1.match.predicate(v => v > 0), {
                [MatchResult_1.MatchResult.was]: "ab",
                [MatchResult_1.MatchResult.expected]: { predicateFailed: { arrow: "v => v > 0" } }
            });
            (0, assertThat_1.assertThat)("ab")
                .failsWith(match_1.match.predicate(v => v > 0, "greater then zero"), {
                [MatchResult_1.MatchResult.was]: "ab",
                [MatchResult_1.MatchResult.expected]: "greater then zero"
            });
        });
        it("Mismatches: errors", () => {
            const mismatched = [];
            const matcher = match_1.match.predicate(pred, 'failed');
            matcher.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, "ab");
            (0, assertThat_1.assertThat)(mismatched).is([
                { actual: "ab", expected: "failed" }
            ]);
        });
        it("Mismatches: exception", () => {
            const mismatched = [];
            const matcher = match_1.match.predicate(() => {
                throw new Error('bad');
            });
            matcher.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, "ab");
            (0, assertThat_1.assertThat)(mismatched).is([
                { actual: { exception: "bad", actual: "ab" }, expected: { predicateFailed: { arrow: "()" } } }
            ]);
        });
        it("Mismatches: exception with an object instead of an Error", () => {
            const mismatched = [];
            const matcher = match_1.match.predicate(() => {
                throw { error: 'error' };
            });
            matcher.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, "ab");
            (0, assertThat_1.assertThat)(mismatched).is([
                { actual: { actual: "ab", exception: '{"error":"error"}' }, expected: { predicateFailed: { arrow: "()" } } }
            ]);
        });
        it("Mismatches: exception with a null instead of an Error", () => {
            const mismatched = [];
            const matcher = match_1.match.predicate(() => {
                throw null;
            });
            matcher.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, "ab");
            (0, assertThat_1.assertThat)(mismatched).is([
                { actual: { actual: "ab", exception: 'null' }, expected: { predicateFailed: { arrow: "()" } } }
            ]);
        });
    });
    describe("validateThat():", () => {
        it("succeeds", () => {
            const validation = (0, validateThat_1.validateThat)(3).satisfies(matcher);
            (0, assertThat_1.assertThat)(validation.passed()).is(true);
        });
        it("fails", () => {
            const validation = (0, validateThat_1.validateThat)(-1).satisfies(matcher);
            (0, assertThat_1.assertThat)(validation.passed()).is(false);
            (0, assertThat_1.assertThat)(validation.errors).is([
                `{actual: -1, expected: {predicateFailed: {arrow: "v => v > 0"}}}`
            ]);
        });
    });
});
function pred() {
    return false;
}
//# sourceMappingURL=PredicateMatcher.micro.js.map