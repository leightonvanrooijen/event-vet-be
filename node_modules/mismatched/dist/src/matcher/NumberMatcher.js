"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.numberMatcher = void 0;
const PredicateMatcher_1 = require("./PredicateMatcher");
const ofType_1 = require("../ofType");
exports.numberMatcher = {
    nan: () => PredicateMatcher_1.PredicateMatcher.make(ofType_1.ofType.isNaN, "NaN"),
    less: (expected) => PredicateMatcher_1.PredicateMatcher.make(value => ofType_1.ofType.isNumber(value) && value < expected, { "number.less": expected }),
    lessEqual: (expected) => PredicateMatcher_1.PredicateMatcher.make(value => ofType_1.ofType.isNumber(value) && (value <= expected || (isNaN(value) && isNaN(expected))), { "number.lessEqual": expected }),
    greater: (expected) => PredicateMatcher_1.PredicateMatcher.make(value => ofType_1.ofType.isNumber(value) && value > expected, { "number.greater": expected }),
    greaterEqual: (expected) => PredicateMatcher_1.PredicateMatcher.make(value => ofType_1.ofType.isNumber(value) && (value >= expected || (isNaN(value) && isNaN(expected))), { "number.greaterEqual": expected }),
    withinDelta: (expected, delta) => PredicateMatcher_1.PredicateMatcher.make(value => ofType_1.ofType.isNumber(value) && ofType_1.ofType.isNumber(delta) && (Math.abs(value - expected) <= delta ||
        (isNaN(value) && isNaN(expected)) ||
        (value === Infinity && expected === Infinity) ||
        (value === -Infinity && expected === -Infinity)), { "number.nearWithDelta": expected }),
};
//# sourceMappingURL=NumberMatcher.js.map