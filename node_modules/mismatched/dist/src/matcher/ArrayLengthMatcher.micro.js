"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertThat_1 = require("../assertThat");
const match_1 = require("../match");
const MatchResult_1 = require("../MatchResult");
const DiffMatcher_1 = require("./DiffMatcher");
const validateThat_1 = require("../validateThat");
describe("array.length:", () => {
    describe("assertThat():", () => {
        it('matches', () => {
            const actual = ["b", "b"];
            (0, assertThat_1.assertThat)(actual).is(match_1.match.array.length(2));
        });
        it('does not match', () => {
            const actual = ["a", "b"];
            (0, assertThat_1.assertThat)(actual).failsWith(match_1.match.array.length(1), { [MatchResult_1.MatchResult.was]: 2, [MatchResult_1.MatchResult.expected]: { "array.length": 1 } });
        });
        it('does not match: errors', () => {
            const mismatched = [];
            const matcher = match_1.match.array.length(1);
            matcher.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, ["a", "b"]);
            (0, assertThat_1.assertThat)(mismatched).is([
                { actual: ["a", "b"], expected: { "array.length": 1 } }
            ]);
        });
    });
    describe("validateThat():", () => {
        const expected = match_1.match.array.length(2);
        it("succeeds", () => {
            const validation = (0, validateThat_1.validateThat)(["b", "b"]).satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(true);
        });
        it("fails", () => {
            const validation = (0, validateThat_1.validateThat)(["b", "b", "b"]).satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(false);
            (0, assertThat_1.assertThat)(validation.errors).is([
                `{actual: ["b", "b", "b"], expected: {"array.length": 2}}`
            ]);
        });
    });
});
//# sourceMappingURL=ArrayLengthMatcher.micro.js.map