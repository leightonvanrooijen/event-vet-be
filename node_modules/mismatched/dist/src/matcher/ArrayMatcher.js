"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayMatcher = void 0;
const matchMaker_1 = require("../matchMaker/matchMaker");
const MatchResult_1 = require("../MatchResult");
const DiffMatcher_1 = require("./DiffMatcher");
const Mismatched_1 = require("./Mismatched");
const arrayDiff_1 = require("../diff/arrayDiff");
const ofType_1 = require("../ofType");
class ArrayMatcher extends DiffMatcher_1.DiffMatcher {
    constructor(elementMatchers) {
        super();
        this.elementMatchers = elementMatchers;
        this.specificity = DiffMatcher_1.DiffMatcher.andSpecificity(elementMatchers);
    }
    static make(expected) {
        return new ArrayMatcher(expected.map(e => (0, matchMaker_1.matchMaker)(e)));
    }
    mismatches(context, mismatched, actual) {
        if (!ofType_1.ofType.isArray(actual)) {
            mismatched.push(Mismatched_1.Mismatched.makeExpectedMessage(context, actual, "array expected"));
            return MatchResult_1.MatchResult.wasExpected(actual, this.describe(), 1, 0);
        }
        if (actual.length === 0 && this.elementMatchers.length === 0) {
            return new MatchResult_1.MatchResult(undefined, 1, 1);
        }
        const pairs = (0, arrayDiff_1.arrayDiff)(this.elementMatchers, actual);
        let compares = 0;
        let matches = 0;
        const results = pairs.map((pair) => {
            if (pair.matcher.isSome() && pair.actual.isNone()) {
                compares += 1;
                mismatched.push(Mismatched_1.Mismatched.makeMissing(context, actual, pair.matcher.get().describe()));
                return { [MatchResult_1.MatchResult.expected]: pair.matcher.get().describe() };
            }
            if (pair.matcher.isNone() && pair.actual.isSome()) {
                compares += 1;
                mismatched.push(Mismatched_1.Mismatched.makeUnexpectedMessage(context, actual, pair.actual.get()));
                return { [MatchResult_1.MatchResult.unexpected]: pair.actual.get() };
            }
            if (pair.matcher.isSome() && pair.actual.isSome()) {
                const result = pair.matcher.get().mismatches(context.add("[" + pair.actualIndex + "]"), mismatched, pair.actual.get());
                compares += result.compares;
                matches += result.matchRate * result.compares;
                if (result.passed()) {
                    return pair.actual.get();
                }
                else {
                    return result.diff;
                }
            }
        });
        return new MatchResult_1.MatchResult(results, compares, matches);
    }
    describe() {
        return this.elementMatchers.map(e => e.describe());
    }
}
exports.ArrayMatcher = ArrayMatcher;
//# sourceMappingURL=ArrayMatcher.js.map