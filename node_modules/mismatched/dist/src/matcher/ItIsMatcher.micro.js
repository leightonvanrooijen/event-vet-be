"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const match_1 = require("../match");
const assertThat_1 = require("../assertThat");
const DiffMatcher_1 = require("./DiffMatcher");
const validateThat_1 = require("../validateThat");
describe("match.itIs():", () => {
    describe("assertThat():", () => {
        it('object itself', () => {
            const actual = { a: "b" };
            (0, assertThat_1.assertThat)(actual).is(match_1.match.itIs(actual));
            (0, assertThat_1.assertThat)(actual).isNot(match_1.match.itIs({ a: "b" }));
        });
        it('array itself', () => {
            const actual = [1, 2, 3];
            (0, assertThat_1.assertThat)(actual).is(match_1.match.itIs(actual));
            (0, assertThat_1.assertThat)(actual).isNot(match_1.match.itIs([1, 2, 3]));
        });
        it('array itself mismatches: errors', () => {
            const mismatched = [];
            const matcher = match_1.match.itIs([1, 2, 3]);
            matcher.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, [1, 2, 3]);
            (0, assertThat_1.assertThat)(mismatched).is([
                { actual: [1, 2, 3], expected: { itIsTheSameObjectAs: [1, 2, 3] } }
            ]);
        });
    });
    describe("validateThat():", () => {
        const expectedValue = { a: 3 };
        const expected = match_1.match.itIs(expectedValue);
        it("succeeds", () => {
            const validation = (0, validateThat_1.validateThat)(expectedValue).satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(true);
        });
        it("fails", () => {
            const validation = (0, validateThat_1.validateThat)(false).satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(false);
            (0, assertThat_1.assertThat)(validation.errors).is([
                `{actual: false, expected: {itIsTheSameObjectAs: {a: 3}}}`
            ]);
        });
    });
});
//# sourceMappingURL=ItIsMatcher.micro.js.map