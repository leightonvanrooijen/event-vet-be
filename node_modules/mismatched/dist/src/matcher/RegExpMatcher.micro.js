"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertThat_1 = require("../assertThat");
const match_1 = require("../match");
const MatchResult_1 = require("../MatchResult");
const DiffMatcher_1 = require("./DiffMatcher");
const validateThat_1 = require("../validateThat");
describe("RegExpMatcher:", () => {
    describe("assertThat():", () => {
        it("Matches", () => {
            (0, assertThat_1.assertThat)("ab").is(match_1.match.regEx.match(/a./));
            (0, assertThat_1.assertThat)("ab").is(/a./);
            (0, assertThat_1.assertThat)("ab").is(match_1.match.regEx.match(/ab/));
            (0, assertThat_1.assertThat)("AB").is(match_1.match.regEx.match(/ab/ig));
            (0, assertThat_1.assertThat)("AB").is(match_1.match.regEx.match(/ab/i));
            (0, assertThat_1.assertThat)(/[ap]\.?m?\.?/i).is(/[ap]\.?m?\.?/i);
        });
        it("Mismatches", () => {
            (0, assertThat_1.assertThat)("ab").failsWith(match_1.match.regEx.match(/c/), { [MatchResult_1.MatchResult.was]: "ab", [MatchResult_1.MatchResult.expected]: "/c/" });
        });
        it("Mismatches: errors", () => {
            const mismatched = [];
            const matcher = match_1.match.regEx.match(/c/);
            matcher.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, "ab");
            (0, assertThat_1.assertThat)(mismatched).is([
                { actual: "ab", expected: "/c/" }
            ]);
        });
    });
    describe("validateThat():", () => {
        const expected = match_1.match.regEx.match(/a./);
        it("succeeds", () => {
            const validation = (0, validateThat_1.validateThat)("ab").satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(true);
        });
        it("fails", () => {
            const validation = (0, validateThat_1.validateThat)("Ab").satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(false);
            (0, assertThat_1.assertThat)(validation.errors).is([
                `{actual: "Ab", expected: "/a./"}`
            ]);
        });
    });
});
//# sourceMappingURL=RegExpMatcher.micro.js.map