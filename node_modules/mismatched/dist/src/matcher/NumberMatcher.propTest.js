"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fc = require("fast-check");
const assertThat_1 = require("../assertThat");
const match_1 = require("../match");
const numberValue = () => fc.oneof(fc.integer(), fc.float(), fc.double())
    .filter(v => v > Number.MIN_SAFE_INTEGER && v < Number.MAX_SAFE_INTEGER);
const realValue = () => fc.oneof(fc.integer(), fc.float(), fc.double())
    .filter(v => v !== Infinity && v !== -Infinity && !isNaN(v));
describe("match.number...() property tests:", () => {
    it("always matches when the relation is true with a positive number", () => {
        fc.assert(fc.property(numberValue(), (value) => {
            (0, assertThat_1.assertThat)(value).is(value);
            (0, assertThat_1.assertThat)(value).is(match_1.match.number.less(value + 1));
            (0, assertThat_1.assertThat)(value).is(match_1.match.number.lessEqual(value));
            (0, assertThat_1.assertThat)(value).is(match_1.match.number.lessEqual(value + 1));
            (0, assertThat_1.assertThat)(value).is(match_1.match.number.greater(value - 1));
            (0, assertThat_1.assertThat)(value).is(match_1.match.number.greaterEqual(value));
        }));
    });
    it("always matches when real is close, disregarding Infinity", () => {
        fc.assert(fc.property(realValue(), (value) => {
            (0, assertThat_1.assertThat)(value).is(match_1.match.number.withinDelta(value, 0.0));
            (0, assertThat_1.assertThat)(value).is(match_1.match.number.withinDelta(value, 100.0));
            (0, assertThat_1.assertThat)(value + 0.1).is(match_1.match.number.withinDelta(value, 0.2));
            (0, assertThat_1.assertThat)(value - 0.1).is(match_1.match.number.withinDelta(value, 0.2));
        }));
    });
    it("never matches when the relation is false with a positive number", () => {
        fc.assert(fc.property(numberValue(), (value) => {
            (0, assertThat_1.assertThat)(value).isNot(match_1.match.number.less(value - 1));
            (0, assertThat_1.assertThat)(value).isNot(match_1.match.number.lessEqual(value - 1));
            (0, assertThat_1.assertThat)(value).isNot(match_1.match.number.greater(value + 1));
            (0, assertThat_1.assertThat)(value).isNot(match_1.match.number.greaterEqual(value + 1));
        }));
    });
});
//# sourceMappingURL=NumberMatcher.propTest.js.map