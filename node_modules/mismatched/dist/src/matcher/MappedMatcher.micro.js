"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertThat_1 = require("../assertThat");
const match_1 = require("../match");
const MatchResult_1 = require("../MatchResult");
const DiffMatcher_1 = require("./DiffMatcher");
const validateThat_1 = require("../validateThat");
describe("MappedMatcher()", () => {
    describe("assertThat():", () => {
        const matcher = match_1.match.mapped(a => a.m, 2, { extract: "m" });
        it("matches", () => {
            (0, assertThat_1.assertThat)({ m: 2 }).is(matcher);
        });
        it("mismatches", () => {
            (0, assertThat_1.assertThat)(3).failsWith(matcher, {
                [MatchResult_1.MatchResult.was]: 3,
                [MatchResult_1.MatchResult.expected]: { mapped: { description: { extract: "m" }, matcher: 2 } }
            });
        });
        it("mismatches: errors", () => {
            const mismatched = [];
            matcher.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, 3);
            (0, assertThat_1.assertThat)(mismatched).is([
                { actual: undefined, expected: 2 }
            ]);
        });
        it("Handles a string mapped", () => {
            const actual = {
                detail: JSON.stringify({ f: [0] })
            };
            (0, assertThat_1.assertThat)(actual).is({ detail: match_1.match.mapped(JSON.parse, { f: [0] }, 'json') });
        });
    });
    describe("validateThat():", () => {
        const matcher = match_1.match.mapped(a => a.m, match_1.match.ofType.number(), { extract: "m" });
        it("succeeds", () => {
            const validation = (0, validateThat_1.validateThat)({ m: 2 }).satisfies(matcher);
            (0, assertThat_1.assertThat)(validation.passed()).is(true);
        });
        it("fails", () => {
            const validation = (0, validateThat_1.validateThat)({ m: false }).satisfies(matcher);
            (0, assertThat_1.assertThat)(validation.passed()).is(false);
            (0, assertThat_1.assertThat)(validation.errors).is([
                `{actual: false, expected: "ofType.number"}`
            ]);
        });
    });
});
//# sourceMappingURL=MappedMatcher.micro.js.map