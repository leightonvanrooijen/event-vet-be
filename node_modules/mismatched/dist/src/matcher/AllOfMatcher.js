"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllOfMatcher = void 0;
const DiffMatcher_1 = require("./DiffMatcher");
const matchMaker_1 = require("../matchMaker/matchMaker");
const MatchResult_1 = require("../MatchResult");
const AnyMatcher_1 = require("./AnyMatcher");
class AllOfMatcher extends DiffMatcher_1.DiffMatcher {
    constructor(matchers) {
        super();
        this.matchers = matchers;
        this.specificity = DiffMatcher_1.DiffMatcher.andSpecificity(matchers);
    }
    static make(matchers) {
        const subMatchers = matchers.map(m => (0, matchMaker_1.matchMaker)(m)).filter(m => !(m instanceof AnyMatcher_1.AnyMatcher));
        switch (subMatchers.length) {
            case 0:
                return new AnyMatcher_1.AnyMatcher();
            case 1:
                return subMatchers[0];
            default:
                return new AllOfMatcher(subMatchers);
        }
    }
    mismatches(context, mismatched, actual) {
        const incorrectMatchers = [];
        let compares = 0;
        let matches = 0;
        const localMismatched = [];
        this.matchers.forEach(m => {
            let matchResult = m.mismatches(context, localMismatched, actual);
            if (!matchResult.passed()) {
                incorrectMatchers.push(m);
            }
            compares += matchResult.compares;
            matches += matchResult.matchRate * matchResult.compares;
        });
        if (incorrectMatchers.length === 0) {
            return MatchResult_1.MatchResult.good(compares);
        }
        mismatched.push(...localMismatched);
        if (incorrectMatchers.length === 1) {
            // Just describe that specific one as an error
            const incorrect = incorrectMatchers[0];
            return MatchResult_1.MatchResult.wasExpected(actual, incorrect.describe(), compares, matches);
        }
        return MatchResult_1.MatchResult.wasExpected(actual, this.describe(), compares, matches);
    }
    describe() {
        return { allOf: this.matchers.map(m => m.describe()) };
    }
}
exports.AllOfMatcher = AllOfMatcher;
/*
   Accumulate the compares and matches of all of the matchers to compute the overall matchRate
 */
//# sourceMappingURL=AllOfMatcher.js.map