import { ContextOfValidationError, DiffMatcher } from "./DiffMatcher";
import { Mismatched } from "./Mismatched";
import { MatchResult } from "../MatchResult";
export declare class UnorderedArrayMatcher<T> extends DiffMatcher<T[]> {
    private matchers;
    private subset;
    constructor(matchers: DiffMatcher<T>[], subset: boolean);
    static make<T>(expected: Set<DiffMatcher<T>> | Set<T> | Array<T> | Map<any, any>, subset?: boolean): any;
    mismatches(context: ContextOfValidationError, mismatched: Array<Mismatched>, actuals: T[]): MatchResult;
    tryMatch(context: ContextOfValidationError, matcher: DiffMatcher<T>, actuals: Array<T>, matcherPerActual: {
        matcher?: DiffMatcher<T>;
    }[], matchedActual: boolean[], failingMatchers: DiffMatcher<T>[]): void;
    describe(): any;
}
