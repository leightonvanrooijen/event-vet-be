"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertThat_1 = require("../assertThat");
const match_1 = require("../match");
const MatchResult_1 = require("../MatchResult");
const DiffMatcher_1 = require("./DiffMatcher");
const validateThat_1 = require("../validateThat");
describe("DescribeContextMatcher()", () => {
    const expected = match_1.match.describeContext(() => "four", match_1.match.describe(4, (actual, context) => `4 of ${context}`));
    describe("assertThat():", () => {
        it("matches", () => {
            (0, assertThat_1.assertThat)(4).is(expected);
        });
        it("mismatches", () => {
            (0, assertThat_1.assertThat)(2).failsWith(expected, { [MatchResult_1.MatchResult.was]: 2, [MatchResult_1.MatchResult.expected]: 4 });
        });
        it("mismatches without a nested match.describe(), with no influence", () => {
            const expected = match_1.match.describeContext(() => "four", 4);
            (0, assertThat_1.assertThat)(2).failsWith(expected, { [MatchResult_1.MatchResult.was]: 2, [MatchResult_1.MatchResult.expected]: 4 });
        });
        it("mismatches: errors", () => {
            const mismatched = [];
            expected.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, 2);
            (0, assertThat_1.assertThat)(mismatched).is(["4 of four"]);
        });
    });
    describe("validateThat():", () => {
        it("succeeds", () => {
            const validation = (0, validateThat_1.validateThat)(4).satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(true);
        });
        it("fails", () => {
            const validation = (0, validateThat_1.validateThat)(3).satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(false);
            (0, assertThat_1.assertThat)(validation.errors).is([
                "4 of four"
            ]);
        });
    });
    it("describe example", () => {
        const results = (0, validateThat_1.validateThat)({ f: "a" })
            .satisfies({
            f: match_1.match.describe(match_1.match.ofType.number(), actual => `four, not ${actual}`)
        });
        (0, assertThat_1.assertThat)(results.errors).is(["four, not a"]);
    });
});
//# sourceMappingURL=DescribeContextMatcher.micro.js.map