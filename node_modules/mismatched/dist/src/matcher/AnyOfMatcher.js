"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnyOfMatcher = void 0;
const DiffMatcher_1 = require("./DiffMatcher");
const __1 = require("..");
const MatchResult_1 = require("../MatchResult");
const Mismatched_1 = require("./Mismatched");
class AnyOfMatcher extends DiffMatcher_1.DiffMatcher {
    constructor(matchers) {
        super();
        this.matchers = matchers;
        this.specificity = DiffMatcher_1.DiffMatcher.orSpecificity(matchers);
    }
    static make(matchers) {
        if (matchers.length === 1) {
            return (0, __1.matchMaker)(matchers[0]);
        }
        return new AnyOfMatcher(matchers.map(m => (0, __1.matchMaker)(m)));
    }
    mismatches(context, mismatched, actual) {
        const keyPartialMatchers = [];
        const keyPartialMatchResults = [];
        const keyPartialMismatched = [];
        const nonZeroMatchers = [];
        const nonZeroMatcherResults = [];
        const nonZeroMismatched = [];
        let compares = 1;
        let matches = 0;
        for (let m of this.matchers) {
            const nestedMismatched = [];
            let matchResult = m.mismatches(context, nestedMismatched, actual); // Don't register any mismatches
            if (matchResult.passed()) {
                return MatchResult_1.MatchResult.good(matchResult.compares);
            }
            if (matchResult.matchedObjectKey) {
                keyPartialMatchers.push(m);
                keyPartialMatchResults.push(matchResult);
                keyPartialMismatched.push(nestedMismatched);
            }
            if (matchResult.matches > 0) {
                nonZeroMatchers.push(m);
                nonZeroMatcherResults.push(matchResult);
                nonZeroMismatched.push(nestedMismatched);
            }
            compares += matchResult.compares;
            matches += matchResult.matchRate * matchResult.compares;
        }
        if (keyPartialMatchers.length === 1) {
            const keyPartialMatcher = keyPartialMatchers[0];
            const keyPartialMatchResult = keyPartialMatchResults[0];
            mismatched.push(keyPartialMismatched[0]);
            return MatchResult_1.MatchResult.wasExpected(actual, keyPartialMatcher.describe(), keyPartialMatchResult.compares, keyPartialMatchResult.matches);
        }
        if (nonZeroMatchers.length === 1) {
            const nonZeroMatcher = nonZeroMatchers[0];
            const nonZeroMatcherResult = nonZeroMatcherResults[0];
            mismatched.push(nonZeroMismatched[0]);
            return MatchResult_1.MatchResult.wasExpected(actual, nonZeroMatcher.describe(), nonZeroMatcherResult.compares, nonZeroMatcherResult.matches);
        }
        mismatched.push(Mismatched_1.Mismatched.makeExpectedMessage(context, actual, this.describe()));
        return MatchResult_1.MatchResult.wasExpected(actual, this.describe(), compares, matches);
    }
    describe() {
        return { anyOf: this.matchers.map(m => m.describe()) };
    }
}
exports.AnyOfMatcher = AnyOfMatcher;
/*
   Use the compares and matches of the best matcher to compute the overall matchRate when good.
   But use all the sub-results of the match is bad.
 */
//# sourceMappingURL=AnyOfMatcher.js.map