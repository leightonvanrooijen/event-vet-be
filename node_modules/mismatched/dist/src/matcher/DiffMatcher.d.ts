import { MatchResult } from "../MatchResult";
import { Mismatched } from "./Mismatched";
export declare abstract class DiffMatcher<T> {
    specificity: number;
    static andSpecificity<T>(matchers: Array<DiffMatcher<T>>): number;
    static orSpecificity<T>(matchers: Array<DiffMatcher<T>>): number;
    matches(actual: T): MatchResult;
    trialMatches(actual: T): MatchResult;
    abstract mismatches(context: ContextOfValidationError, mismatched: Array<Mismatched>, actual: T): MatchResult;
    abstract describe(): any;
}
export declare class ContextOfValidationError {
    context: string;
    isUserDefined?: boolean | undefined;
    trialMatch: boolean;
    constructor(context?: string, isUserDefined?: boolean | undefined);
    add(s: string): ContextOfValidationError;
    outerContext(): string;
    inTrial(trialMatch?: boolean): this;
    describe(actual: any, contextDescription: (outerContext: string, actual: any) => string): ContextOfValidationError;
}
