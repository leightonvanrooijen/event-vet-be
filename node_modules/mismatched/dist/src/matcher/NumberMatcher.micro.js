"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertThat_1 = require("../assertThat");
const match_1 = require("../match");
const MatchResult_1 = require("../MatchResult");
const validateThat_1 = require("../validateThat");
describe("NumberMatcher:", () => {
    describe("assertThat():", () => {
        it("less", () => {
            (0, assertThat_1.assertThat)(2).is(match_1.match.number.less(3));
            (0, assertThat_1.assertThat)(4).is(match_1.match.not(match_1.match.number.less(3)));
        });
        it("lessEqual", () => {
            (0, assertThat_1.assertThat)(2).is(match_1.match.number.lessEqual(3));
            (0, assertThat_1.assertThat)(3).is(match_1.match.number.lessEqual(3));
            (0, assertThat_1.assertThat)(4).is(match_1.match.not(match_1.match.number.lessEqual(3)));
            (0, assertThat_1.assertThat)(NaN).is(match_1.match.number.lessEqual(NaN));
            (0, assertThat_1.assertThat)(Infinity).is(match_1.match.number.lessEqual(Infinity));
            (0, assertThat_1.assertThat)(-Infinity).is(match_1.match.number.lessEqual(-Infinity));
        });
        it("greater", () => {
            (0, assertThat_1.assertThat)(2).is(match_1.match.number.greater(1));
            (0, assertThat_1.assertThat)(4).is(match_1.match.not(match_1.match.number.greater(5)));
        });
        it("greaterEqual", () => {
            (0, assertThat_1.assertThat)(4).is(match_1.match.number.greaterEqual(3));
            (0, assertThat_1.assertThat)(3).is(match_1.match.number.greaterEqual(3));
            (0, assertThat_1.assertThat)(2).is(match_1.match.not(match_1.match.number.greaterEqual(3)));
            (0, assertThat_1.assertThat)(NaN).is(match_1.match.number.greaterEqual(NaN));
            (0, assertThat_1.assertThat)(Infinity).is(match_1.match.number.greaterEqual(Infinity));
            (0, assertThat_1.assertThat)(-Infinity).is(match_1.match.number.greaterEqual(-Infinity));
        });
        it("withinDelta", () => {
            (0, assertThat_1.assertThat)(4.1).is(match_1.match.number.withinDelta(4, 0.1));
            (0, assertThat_1.assertThat)(3.15).is(match_1.match.number.withinDelta(3, 0.2));
            (0, assertThat_1.assertThat)(2.85).is(match_1.match.number.withinDelta(3, 0.2));
            (0, assertThat_1.assertThat)(2).is(match_1.match.number.withinDelta(3, 1.0));
            (0, assertThat_1.assertThat)(NaN).is(match_1.match.number.withinDelta(NaN, 1.0));
            (0, assertThat_1.assertThat)(Infinity).is(match_1.match.number.withinDelta(Infinity, 1.0));
            (0, assertThat_1.assertThat)(-Infinity).is(match_1.match.number.withinDelta(-Infinity, 1.0));
        });
        describe("NaN:", () => {
            it("Matches", () => {
                (0, assertThat_1.assertThat)(NaN).is(match_1.match.number.nan());
                (0, assertThat_1.assertThat)(NaN).is(NaN);
                (0, assertThat_1.assertThat)(NaN).isNot(1);
            });
            it("Mismatches", () => {
                (0, assertThat_1.assertThat)("ab")
                    .failsWith(match_1.match.number.nan(), { [MatchResult_1.MatchResult.was]: "ab", [MatchResult_1.MatchResult.expected]: "NaN" });
                (0, assertThat_1.assertThat)(null)
                    .failsWith(match_1.match.number.nan(), { [MatchResult_1.MatchResult.was]: null, [MatchResult_1.MatchResult.expected]: 'NaN' });
            });
        });
    });
    describe("validateThat():", () => {
        const expected = match_1.match.number.greater(0);
        it("succeeds", () => {
            const validation = (0, validateThat_1.validateThat)(3).satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(true);
        });
        it("fails", () => {
            const validation = (0, validateThat_1.validateThat)(-4).satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(false);
            (0, assertThat_1.assertThat)(validation.errors).is([
                `{actual: -4, expected: {"number.greater": 0}}`
            ]);
        });
    });
});
//# sourceMappingURL=NumberMatcher.micro.js.map