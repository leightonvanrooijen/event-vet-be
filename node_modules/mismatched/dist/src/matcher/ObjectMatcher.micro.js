"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertThat_1 = require("../assertThat");
const match_1 = require("../match");
const MatchResult_1 = require("../MatchResult");
const ObjectMatcher_1 = require("./ObjectMatcher");
const DiffMatcher_1 = require("./DiffMatcher");
const validateThat_1 = require("../validateThat");
const __1 = require("..");
const PredicateMatcher_1 = require("./PredicateMatcher");
const CustomiseMismatcher_1 = require("../matchMaker/CustomiseMismatcher");
describe("obj.match:", () => {
    it("hasProperty", () => {
        const actual = { f: undefined };
        (0, assertThat_1.assertThat)(actual.hasOwnProperty('f')).is(true);
        (0, assertThat_1.assertThat)(actual.hasOwnProperty('g')).is(false);
    });
    describe("assertThat():", () => {
        describe('matches', () => {
            it('with implicit matchers', () => {
                const actual = { f: 2, g: 3 };
                (0, assertThat_1.assertThat)(actual).is({ f: 2, g: 3 });
            });
            it('explicit matcher object', () => {
                const actual = { f: 2, g: 3 };
                (0, assertThat_1.assertThat)(actual).is(match_1.match.obj.match({ f: 2, g: 3 }));
            });
            it('literal object', () => {
                const actual = { f: 2, g: 3 };
                (0, assertThat_1.assertThat)(actual).is(actual);
                (0, assertThat_1.assertThat)({ f: 3, g: { e: 4 } }).is({ f: 3, g: { e: 4 } });
            });
            it('literal object with a field that is undefined', () => {
                (0, assertThat_1.assertThat)({ f: undefined }).is({ f: undefined });
                (0, assertThat_1.assertThat)({ f: undefined }).is({});
                (0, assertThat_1.assertThat)({}).is({ f: undefined });
            });
            it('with embedded matchers', () => {
                (0, assertThat_1.assertThat)({ f: 2, g: 3 })
                    .is(match_1.match.obj.match({ f: match_1.match.number.lessEqual(3), g: match_1.match.ofType.number() }));
            });
            it('with a key', () => {
                (0, assertThat_1.assertThat)({ f: 2, g: 3 })
                    .is(match_1.match.obj.match({ f: match_1.match.obj.key(2), g: 3 }));
            });
            it('with symbols', () => {
                const expected = { [Symbol()]: Symbol() };
                (0, assertThat_1.assertThat)(expected).is(expected);
                (0, assertThat_1.assertThat)(expected).isNot({});
                (0, assertThat_1.assertThat)({}).isNot(expected);
            });
            it('mixed with symbols', () => {
                const expected = { [Symbol()]: Symbol(), f: 2 };
                (0, assertThat_1.assertThat)(expected).is(expected);
                (0, assertThat_1.assertThat)(expected).isNot({});
                (0, assertThat_1.assertThat)({}).isNot(expected);
            });
        });
        describe('does not match actual as:', () => {
            describe('different:', () => {
                it('different field value', () => {
                    const actual = { f: 3 };
                    (0, assertThat_1.assertThat)(actual).failsWith({ f: 2 }, { f: { [MatchResult_1.MatchResult.was]: 3, [MatchResult_1.MatchResult.expected]: 2 } });
                });
                it('different field value: errors', () => {
                    const mismatched = [];
                    const matcher = ObjectMatcher_1.ObjectMatcher.make({ f: 2 });
                    matcher.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, { f: 3 });
                    (0, assertThat_1.assertThat)(mismatched).is([
                        { "actual.f": 3, expected: 2 }
                    ]);
                });
                it('different sub-field value', () => {
                    const actual = { f: 2, g: { h: 3 } };
                    (0, assertThat_1.assertThat)(actual).failsWith({ f: 2, g: { h: 2 } }, { f: 2, g: { h: { [MatchResult_1.MatchResult.was]: 3, [MatchResult_1.MatchResult.expected]: 2 } } });
                });
                it('different sub-field value: errors', () => {
                    const mismatched = [];
                    const matcher = ObjectMatcher_1.ObjectMatcher.make({ f: 2, g: { h: 2 } });
                    matcher.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, {
                        f: 2,
                        g: { h: 3 }
                    });
                    (0, assertThat_1.assertThat)(mismatched).is([
                        { "actual.g.h": 3, expected: 2 }
                    ]);
                });
                it('different sub-field value #2', () => {
                    const actual = { g: { h: 3, i: 4 } };
                    (0, assertThat_1.assertThat)(actual).failsWith({ g: { h: 2, i: 5 } }, {
                        g: {
                            h: { [MatchResult_1.MatchResult.was]: 3, [MatchResult_1.MatchResult.expected]: 2 },
                            i: { [MatchResult_1.MatchResult.was]: 4, [MatchResult_1.MatchResult.expected]: 5 }
                        }
                    });
                });
                it('different field value, involving a customer renderer and matcher', () => {
                    class Hide {
                        constructor(f, g, h) {
                            this.f = f;
                            this.g = g;
                            this.h = h;
                        }
                        equals(other) {
                            return this.f === other.f;
                        }
                    }
                    __1.PrettyPrinter.addCustomPrettyPrinter(match_1.match.instanceOf(Hide), (hide) => 'Hide(' + hide.f + ')');
                    const matcher = (expected) => PredicateMatcher_1.PredicateMatcher.make(value => expected.equals(value), expected);
                    CustomiseMismatcher_1.CustomiseMismatcher.addCustomMatcher(match_1.match.instanceOf(Hide), matcher);
                    const actual = { d: new Hide(12, 4444, 5555) };
                    const expect = { d: new Hide(0, 0, 0) };
                    (0, assertThat_1.assertThat)(actual).failsWithRendering(expect, `{d: {${MatchResult_1.MatchResult.was}: Hide(12), ${MatchResult_1.MatchResult.expected}: Hide(0)}}`);
                });
            });
            describe('missing:', () => {
                it('1. missing field', () => {
                    const actual = { f: 3 };
                    (0, assertThat_1.assertThat)(actual).failsWith({ f: 3, g: 4 }, { f: 3, g: { [MatchResult_1.MatchResult.expected]: 4 } });
                });
                it('1. missing field: errors', () => {
                    const mismatched = [];
                    const matcher = ObjectMatcher_1.ObjectMatcher.make({ f: 3, g: 4 });
                    matcher.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, { f: 3 });
                    (0, assertThat_1.assertThat)(mismatched).is([
                        { "actual.g": undefined, expected: 4 }
                    ]);
                });
                it('2. missing field, when no actual fields', () => {
                    const actual = {};
                    (0, assertThat_1.assertThat)(actual).failsWith({ g: 3 }, { g: { [MatchResult_1.MatchResult.expected]: 3 } });
                });
                it('3. missing sub-field', () => {
                    const actual = { f: 2, g: { h: 3, i: 7 } };
                    (0, assertThat_1.assertThat)(actual).failsWith({ f: 3, g: { h: 3, i: 7, j: 4 } }, {
                        f: { [MatchResult_1.MatchResult.was]: 2, [MatchResult_1.MatchResult.expected]: 3 },
                        g: { h: 3, i: 7, j: { [MatchResult_1.MatchResult.expected]: 4 } }
                    });
                });
                it('4. missing sub-field, with no data inside it', () => {
                    const actual = { g: {} };
                    (0, assertThat_1.assertThat)(actual).failsWith({ g: { i: 7 } }, { g: { i: { [MatchResult_1.MatchResult.expected]: 7 } } });
                });
            });
            describe('extra:', () => {
                it('extra field', () => {
                    const actual = { f: 2, g: 3 };
                    (0, assertThat_1.assertThat)(actual).failsWith({ f: 2 }, { f: 2, [MatchResult_1.MatchResult.unexpected]: { g: 3 } });
                });
                it('extra field: errors', () => {
                    const mismatched = [];
                    const matcher = ObjectMatcher_1.ObjectMatcher.make({ f: 2 });
                    matcher.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, { f: 2, g: 3 });
                    (0, assertThat_1.assertThat)(mismatched).is([
                        { actual: { f: 2, g: 3 }, unexpected: { g: 3 } }
                    ]);
                });
                it('extra field when expecting no fields', () => {
                    const actual = { f: 2, g: 3 };
                    (0, assertThat_1.assertThat)(actual).failsWith({}, { [MatchResult_1.MatchResult.unexpected]: { f: 2, g: 3 } });
                });
            });
            it("Needs an actual object", () => {
                (0, assertThat_1.assertThat)(undefined).failsWith({ f: 2 }, { [MatchResult_1.MatchResult.expected]: { f: 2 } });
                (0, assertThat_1.assertThat)(2).failsWith({ f: 2 }, { [MatchResult_1.MatchResult.was]: 2, [MatchResult_1.MatchResult.expected]: { f: 2 } });
            });
            it("has a missing key", () => {
                const actual = { f: 3, g: 4 };
                (0, assertThat_1.assertThat)(actual).failsWith({ f: match_1.match.obj.key(2), g: 5 }, {
                    f: { [MatchResult_1.MatchResult.was]: 3, [MatchResult_1.MatchResult.expected]: 2 },
                    g: { [MatchResult_1.MatchResult.was]: 4, [MatchResult_1.MatchResult.expected]: 5 }
                });
            });
            it("has two missing keys", () => {
                const actual = { f: 3, g: 4 };
                const expected = { f: match_1.match.obj.key(2), g: match_1.match.obj.key(5) };
                (0, assertThat_1.assertThat)(actual).failsWith(expected, {
                    f: { [MatchResult_1.MatchResult.was]: 3, [MatchResult_1.MatchResult.expected]: 2 },
                    g: { [MatchResult_1.MatchResult.was]: 4, [MatchResult_1.MatchResult.expected]: 5 }
                });
            });
            it("has one missing key of two keys", () => {
                const actual = { f: 3, g: 4 };
                const expected = { f: match_1.match.obj.key(2), g: match_1.match.obj.key(4) };
                (0, assertThat_1.assertThat)(actual).failsWith(expected, {
                    f: { [MatchResult_1.MatchResult.was]: 3, [MatchResult_1.MatchResult.expected]: 2 }, g: 4
                });
            });
        });
    });
    describe("validateThat():", () => {
        it("succeeds", () => {
            const expected = { f: match_1.match.ofType.number(), g: match_1.match.ofType.boolean() };
            const validationResult = (0, validateThat_1.validateThat)({ f: 2, g: true }).satisfies(expected);
            (0, assertThat_1.assertThat)(validationResult.passed()).is(true);
        });
        it("fails on one field", () => {
            const expected = { f: match_1.match.ofType.number(), g: match_1.match.ofType.boolean() };
            const validationResult = (0, validateThat_1.validateThat)({ f: "2", g: true }).satisfies(expected);
            (0, assertThat_1.assertThat)(validationResult.passed()).is(false);
            (0, assertThat_1.assertThat)(validationResult.errors).is([
                `{"actual.f": "2", expected: "ofType.number"}`
            ]);
        });
        it("fails", () => {
            const expected = { f: match_1.match.ofType.number(), g: match_1.match.ofType.boolean() };
            const validationResult = (0, validateThat_1.validateThat)({ f: "2", g: 3 }).satisfies(expected);
            (0, assertThat_1.assertThat)(validationResult.passed()).is(false);
            (0, assertThat_1.assertThat)(validationResult.errors).is([
                `{"actual.f": "2", expected: "ofType.number"}`,
                `{"actual.g": 3, expected: "ofType.boolean"}`
            ]);
        });
        it("fails on one field with optionalNull()", () => {
            const expected = {
                f: {
                    h: match_1.match.optionalNull({ j: match_1.match.ofType.number() }),
                    i: 4
                },
                g: match_1.match.ofType.boolean()
            };
            const validationResult = (0, validateThat_1.validateThat)({ f: { h: { j: "2" }, i: 4 }, g: true }).satisfies(expected);
            (0, assertThat_1.assertThat)(validationResult.passed()).is(false);
            (0, assertThat_1.assertThat)(validationResult.errors).is([
                `{"actual.f.h.j": "2", expected: "ofType.number"}`
            ]);
        });
        it("has a missing key", () => {
            const validationResult = (0, validateThat_1.validateThat)({ f: "2", g: 3 }).satisfies({
                f: match_1.match.obj.key(match_1.match.ofType.number()),
                g: 3
            });
            (0, assertThat_1.assertThat)(validationResult.errors).is([
                `{"actual.f": "2", expected: "ofType.number"}`
            ]);
        });
    });
});
//# sourceMappingURL=ObjectMatcher.micro.js.map