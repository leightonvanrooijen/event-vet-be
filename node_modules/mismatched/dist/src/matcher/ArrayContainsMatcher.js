"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayContainsMatcher = void 0;
const DiffMatcher_1 = require("./DiffMatcher");
const Mismatched_1 = require("./Mismatched");
const MatchResult_1 = require("../MatchResult");
const matchMaker_1 = require("../matchMaker/matchMaker");
const ofType_1 = require("../ofType");
class ArrayContainsMatcher extends DiffMatcher_1.DiffMatcher {
    constructor(matcher) {
        super();
        this.matcher = matcher;
        this.specificity = matcher.specificity;
    }
    mismatches(context, mismatched, actual) {
        if (ofType_1.ofType.isArray(actual)) {
            let compares = 0;
            let matches = 0;
            for (let a of actual) {
                const result = this.matcher.matches(a);
                if (result.passed()) {
                    return MatchResult_1.MatchResult.good(result.compares);
                }
                compares += result.compares;
                matches += result.matchRate * result.compares;
            }
            mismatched.push(Mismatched_1.Mismatched.makeExpectedMessage(context, actual, this.describe()));
            return MatchResult_1.MatchResult.wasExpected(actual, this.describe(), compares, matches);
        }
        mismatched.push(Mismatched_1.Mismatched.makeExpectedMessage(context, actual, "array expected"));
        return MatchResult_1.MatchResult.wasExpected(actual, this.describe(), 1, 0);
    }
    describe() {
        return { "array.contains": this.matcher.describe() };
    }
    static make(expected) {
        return new ArrayContainsMatcher((0, matchMaker_1.matchMaker)(expected));
    }
}
exports.ArrayContainsMatcher = ArrayContainsMatcher;
//# sourceMappingURL=ArrayContainsMatcher.js.map