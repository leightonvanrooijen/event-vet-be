import { ContextOfValidationError, DiffMatcher } from "./DiffMatcher";
import { Mismatched } from "./Mismatched";
import { MatchResult } from "../MatchResult";
import { UnorderedArrayMatcher } from "./UnorderedArrayMatcher";
export declare class SetMatcher<T> extends DiffMatcher<Set<T>> {
    private matchers;
    private subset;
    unorderedArrayMatcher: UnorderedArrayMatcher<T>;
    private constructor();
    static make<T>(expected: Set<DiffMatcher<T>> | Set<T> | Array<T> | Map<any, any>, subset?: boolean): any;
    mismatches(context: ContextOfValidationError, mismatched: Array<Mismatched>, actual: Set<T> | Array<T> | Map<T, T>): MatchResult;
    describe(): any;
}
