"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertThat_1 = require("../assertThat");
const match_1 = require("../match");
const MatchResult_1 = require("../MatchResult");
const DiffMatcher_1 = require("./DiffMatcher");
const validateThat_1 = require("../validateThat");
const StringDiff_1 = require("../diff/StringDiff");
describe("StringMatcher:", () => {
    describe("assertThat():", () => {
        it('string', () => {
            const actual = "a";
            (0, assertThat_1.assertThat)(actual).is(match_1.match.string.match(actual));
            (0, assertThat_1.assertThat)(actual).is(actual);
        });
        it('regular expression', () => {
            (0, assertThat_1.assertThat)("abc").is(match_1.match.string.match(/a.c/));
        });
        it("uuid", () => {
            (0, assertThat_1.assertThat)('b28a0a82-a721-11e9-9037-077495dd0010').is(match_1.match.uuid());
            (0, assertThat_1.assertThat)('077495dd00').isNot(match_1.match.uuid());
        });
        it('not a string', () => {
            (0, assertThat_1.assertThat)(1).failsWith("a", { [MatchResult_1.MatchResult.was]: 1, [MatchResult_1.MatchResult.expected]: "a" });
        });
        it('mismatches', () => {
            (0, assertThat_1.assertThat)("a").failsWith("b", { [MatchResult_1.MatchResult.was]: "a", [MatchResult_1.MatchResult.expected]: "b" });
            (0, assertThat_1.assertThat)("a").failsWith(null, { [MatchResult_1.MatchResult.was]: "a", [MatchResult_1.MatchResult.expected]: null });
        });
        it('mismatches long strings', () => {
            const actual = "abcd-e-fghijk";
            const expected = "abcd+E+fghijk";
            (0, assertThat_1.assertThat)(actual).failsWith(expected, {
                [MatchResult_1.MatchResult.was]: actual,
                [MatchResult_1.MatchResult.expected]: expected,
                [MatchResult_1.MatchResult.differ]: `abcd${StringDiff_1.stringDiff.missingColour("-e-")}${StringDiff_1.stringDiff.extraColour("+E+")}fghijk`
            });
        });
        it('mismatches: errors', () => {
            (0, assertThat_1.assertThat)("a").failsWith("b", { [MatchResult_1.MatchResult.was]: "a", [MatchResult_1.MatchResult.expected]: "b" });
            const mismatched = [];
            const matcher = match_1.match.string.match("b");
            matcher.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, "a");
            (0, assertThat_1.assertThat)(mismatched).is([
                { actual: "a", expected: "b" }
            ]);
        });
    });
    describe("validateThat():", () => {
        const expected = match_1.match.string.startsWith("a");
        it("succeeds", () => {
            const validation = (0, validateThat_1.validateThat)("abc").satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(true);
        });
        it("fails string match", () => {
            const expected = "c";
            const validation = (0, validateThat_1.validateThat)("b").satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(false);
            (0, assertThat_1.assertThat)(validation.errors).is([
                `{actual: "b", expected: "c"}`
            ]);
        });
        it("fails with 'starts with'", () => {
            const validation = (0, validateThat_1.validateThat)("b").satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(false);
            (0, assertThat_1.assertThat)(validation.errors).is([
                `{actual: "b", expected: {"string.startsWith": "a"}}`
            ]);
        });
    });
});
//# sourceMappingURL=StringMatcher.micro.js.map