"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertThat_1 = require("../assertThat");
const match_1 = require("../match");
const MatchResult_1 = require("../MatchResult");
const DiffMatcher_1 = require("./DiffMatcher");
const validateThat_1 = require("../validateThat");
describe("OptionalNullMatcher:", () => {
    describe("assertThat():", () => {
        it("Matches", () => {
            (0, assertThat_1.assertThat)(3).is(match_1.match.optionalNull(3));
            (0, assertThat_1.assertThat)(undefined).is(match_1.match.optionalNull(3));
            (0, assertThat_1.assertThat)(null).is(match_1.match.optionalNull(3));
        });
        it("Mismatches", () => {
            (0, assertThat_1.assertThat)(4).failsWith(match_1.match.optionalNull(3), { [MatchResult_1.MatchResult.was]: 4, [MatchResult_1.MatchResult.expected]: 3 });
        });
        it("Mismatches: errors", () => {
            const mismatched = [];
            const matcher = match_1.match.optionalNull(3);
            matcher.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, 4);
            (0, assertThat_1.assertThat)(mismatched).is([
                { actual: 4, expected: 3 }
            ]);
        });
    });
    describe("validateThat():", () => {
        const expected = { f: match_1.match.optionalNull(match_1.match.ofType.number()) };
        it("succeeds", () => {
            const validation = (0, validateThat_1.validateThat)({ f: 3 }).satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(true);
        });
        it("succeeds when missing", () => {
            const validation = (0, validateThat_1.validateThat)({}).satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(true);
        });
        it("succeeds when null", () => {
            const validation = (0, validateThat_1.validateThat)({ f: null }).satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(true);
        });
        it("fails with wrong type", () => {
            const validation = (0, validateThat_1.validateThat)({ f: "wrong" }).satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(false);
            (0, assertThat_1.assertThat)(validation.errors).is([
                `{"actual.f": "wrong", expected: "ofType.number"}`
            ]);
        });
        it("Fails with lower-level diff", () => {
            const validation = (0, validateThat_1.validateThat)({ name: { title: 4 } }).satisfies({
                name: match_1.match.optionalNull(match_1.match.obj.match({ title: 's' }))
            });
            (0, assertThat_1.assertThat)(validation.passed()).is(false);
            (0, assertThat_1.assertThat)(validation.errors).is([
                '{"actual.name.title": 4, expected: "s"}'
            ]);
        });
    });
});
//# sourceMappingURL=OptionalNullMatcher.micro.js.map