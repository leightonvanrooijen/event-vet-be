"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertThat_1 = require("../assertThat");
const match_1 = require("../match");
const MatchResult_1 = require("../MatchResult");
const DiffMatcher_1 = require("./DiffMatcher");
const validateThat_1 = require("../validateThat");
describe("DescribeMatcher()", () => {
    const expected = match_1.match.describe(4, (actual, context) => context + ": four");
    describe("assertThat():", () => {
        it("matches", () => {
            (0, assertThat_1.assertThat)(4).is(expected);
        });
        it("mismatches", () => {
            (0, assertThat_1.assertThat)(2).failsWith(expected, { [MatchResult_1.MatchResult.was]: 2, [MatchResult_1.MatchResult.expected]: 4 });
        });
        it("mismatches: errors", () => {
            const mismatched = [];
            expected.mismatches(new DiffMatcher_1.ContextOfValidationError(), mismatched, 2);
            (0, assertThat_1.assertThat)(mismatched).is(["actual: four"]);
        });
    });
    describe("validateThat():", () => {
        it("succeeds", () => {
            const validation = (0, validateThat_1.validateThat)(4).satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(true);
        });
        it("fails", () => {
            const validation = (0, validateThat_1.validateThat)(3).satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(false);
            (0, assertThat_1.assertThat)(validation.errors).is([
                "actual: four"
            ]);
        });
        it("fails with specified context", () => {
            const description = (actual, context) => `f of person ${context} should be four`;
            const expected = match_1.match.describeContext((_, a) => a.id, { id: 1, f: match_1.match.describe(4, description) });
            const validation = (0, validateThat_1.validateThat)({ id: 1, f: 3 }).satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(false);
            (0, assertThat_1.assertThat)(validation.errors).is([
                "f of person 1 should be four"
            ]);
        });
        it("Provides tailored validation error messages", () => {
            const nameDescription = (actual, context) => `The name of person #${context} should be a string`;
            const ageDescription = (actual, context) => `The current age of person #${context} should be a positive number`;
            const expected = match_1.match.describeContext((_, a) => a.personId, {
                personId: match_1.match.ofType.number(),
                name: match_1.match.describe(match_1.match.ofType.string(), nameDescription),
                age: match_1.match.describe(match_1.match.number.greaterEqual(0), ageDescription)
            });
            const validation = (0, validateThat_1.validateThat)({ personId: 11, name: 3, age: -1 }).satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(false);
            (0, assertThat_1.assertThat)(validation.errors).is([
                "The name of person #11 should be a string",
                "The current age of person #11 should be a positive number"
            ]);
        });
        it("Provides tailored validation error messages with array", () => {
            const nameDescription = (actual, context) => `The name of person #${context} should be a string`;
            const ageDescription = (actual, context) => `The current age of person #${context} should be a positive number`;
            const expected = match_1.match.array.every(match_1.match.describeContext((_, person) => person.personId || 'unknown', {
                personId: match_1.match.any(),
                name: match_1.match.describe(match_1.match.ofType.string(), nameDescription),
                age: match_1.match.describe(match_1.match.number.greaterEqual(0), ageDescription)
            }));
            const actual = [
                { personId: 11, name: 3, age: 5 },
                { personId: 12, name: 'orange', age: -1 },
                { personId: undefined, name: 'pear', age: -1 }
            ];
            const validation = (0, validateThat_1.validateThat)(actual).satisfies(expected);
            (0, assertThat_1.assertThat)(validation.passed()).is(false);
            (0, assertThat_1.assertThat)(validation.errors).is([
                "The name of person #11 should be a string",
                "The current age of person #12 should be a positive number",
                "The current age of person #unknown should be a positive number"
            ]);
        });
    });
    it("describe example", () => {
        const results = (0, validateThat_1.validateThat)({ f: "a" })
            .satisfies({
            f: match_1.match.describe(match_1.match.ofType.number(), actual => `four, not ${actual}`)
        });
        (0, assertThat_1.assertThat)(results.errors).is(["four, not a"]);
    });
});
//# sourceMappingURL=DescribeMatcher.micro.js.map