"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertThat_1 = require("../assertThat");
const match_1 = require("../match");
describe("assertThat():", () => {
    describe("is()", () => {
        it("Can take a literal value", () => {
            (0, assertThat_1.assertThat)(44).is(44);
        });
        it("Can take a matcher value", () => {
            (0, assertThat_1.assertThat)(44).is(match_1.match.number.lessEqual(45));
        });
    });
    describe("isNot() succeeds if the argument matcher/literal fails to match", () => {
        it("Can take a literal value", () => {
            (0, assertThat_1.assertThat)(44).isNot(33);
            (0, assertThat_1.assertThat)(44).is(match_1.match.not(33));
        });
        it("Can take a matcher value", () => {
            (0, assertThat_1.assertThat)(44).isNot(match_1.match.number.greater(100));
            (0, assertThat_1.assertThat)(44).is(match_1.match.not(match_1.match.number.greater(100)));
        });
    });
    it("isAnyOf() matches at least one of several possibilities", () => {
        (0, assertThat_1.assertThat)(44).isAnyOf([33, match_1.match.number.greater(40)]);
        (0, assertThat_1.assertThat)(44)
            .is(match_1.match.anyOf([33, match_1.match.number.greater(40)]));
    });
    it("isAllOf() matches on all matchers or literals", () => {
        (0, assertThat_1.assertThat)(44).isAllOf([match_1.match.number.greater(40), match_1.match.number.less(50)]);
        (0, assertThat_1.assertThat)(44)
            .is(match_1.match.allOf([match_1.match.number.greater(40), match_1.match.number.less(50)]));
    });
});
//# sourceMappingURL=egAssertThat.micro.js.map