"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.match = void 0;
const IsEqualsMatcher_1 = require("./matcher/IsEqualsMatcher");
const ArrayMatcher_1 = require("./matcher/ArrayMatcher");
const ObjectMatcher_1 = require("./matcher/ObjectMatcher");
const RegExpMatcher_1 = require("./matcher/RegExpMatcher");
const AnyOfMatcher_1 = require("./matcher/AnyOfMatcher");
const AllOfMatcher_1 = require("./matcher/AllOfMatcher");
const OptionalMatcher_1 = require("./matcher/OptionalMatcher");
const NotMatcher_1 = require("./matcher/NotMatcher");
const AnyMatcher_1 = require("./matcher/AnyMatcher");
const PredicateMatcher_1 = require("./matcher/PredicateMatcher");
const StringMatcher_1 = require("./matcher/StringMatcher");
const ofType_1 = require("./ofType");
const NumberMatcher_1 = require("./matcher/NumberMatcher");
const instanceOfMatcher_1 = require("./matcher/instanceOfMatcher");
const ItIsMatcher_1 = require("./matcher/ItIsMatcher");
const MappedMatcher_1 = require("./matcher/MappedMatcher");
const ObjectSomeMatcher_1 = require("./matcher/ObjectSomeMatcher");
const ArrayContainsMatcher_1 = require("./matcher/ArrayContainsMatcher");
const ArrayEveryMatcher_1 = require("./matcher/ArrayEveryMatcher");
const ArrayLengthMatcher_1 = require("./matcher/ArrayLengthMatcher");
const PrettyPrinter_1 = require("./prettyPrint/PrettyPrinter");
const OptionalNullMatcher_1 = require("./matcher/OptionalNullMatcher");
const SetMatcher_1 = require("./matcher/SetMatcher");
const BindMatcher_1 = require("./matcher/BindMatcher");
const DescribeMatcher_1 = require("./matcher/DescribeMatcher");
const DescribeContextMatcher_1 = require("./matcher/DescribeContextMatcher");
const UnorderedArrayMatcher_1 = require("./matcher/UnorderedArrayMatcher");
const decompileActual_1 = require("./decompile/decompileActual");
const ObjectKeyMatcher_1 = require("./matcher/ObjectKeyMatcher");
exports.match = {
    isEquals: (expected) => IsEqualsMatcher_1.IsEqualsMatcher.make(expected),
    itIs: (expected) => ItIsMatcher_1.ItIsMatcher.make(expected),
    array: {
        match: (expected) => ArrayMatcher_1.ArrayMatcher.make(expected),
        contains: (expected) => ArrayContainsMatcher_1.ArrayContainsMatcher.make(expected),
        every: (expected) => ArrayEveryMatcher_1.ArrayEveryMatcher.make(expected),
        length: (expected) => ArrayLengthMatcher_1.ArrayLengthMatcher.make(expected),
        unordered: (expected) => UnorderedArrayMatcher_1.UnorderedArrayMatcher.make(expected),
        unorderedContains: (expected) => UnorderedArrayMatcher_1.UnorderedArrayMatcher.make(expected, true),
    },
    aSet: {
        match: (expected) => SetMatcher_1.SetMatcher.make(expected),
        subset: (expected) => SetMatcher_1.SetMatcher.make(expected, true),
    },
    obj: {
        match: (obj) => ObjectMatcher_1.ObjectMatcher.make(obj),
        has: (expected) => ObjectSomeMatcher_1.ObjectSomeMatcher.make(expected),
        key: (expected) => ObjectKeyMatcher_1.ObjectKeyMatcher.make(expected)
    },
    string: {
        match: (expected) => StringMatcher_1.stringMatcher.match(expected),
        startsWith: (expected) => StringMatcher_1.stringMatcher.startsWith(expected),
        endsWith: (expected) => StringMatcher_1.stringMatcher.endsWith(expected),
        includes: (expected) => StringMatcher_1.stringMatcher.includes(expected)
    },
    uuid: () => StringMatcher_1.stringMatcher.uuid(),
    number: {
        nan: () => NumberMatcher_1.numberMatcher.nan(),
        less: (expected) => NumberMatcher_1.numberMatcher.less(expected),
        lessEqual: (expected) => NumberMatcher_1.numberMatcher.lessEqual(expected),
        greater: (expected) => NumberMatcher_1.numberMatcher.greater(expected),
        greaterEqual: (expected) => NumberMatcher_1.numberMatcher.greaterEqual(expected),
        withinDelta: (expected, delta) => NumberMatcher_1.numberMatcher.withinDelta(expected, delta)
    },
    regEx: {
        match: (expected) => RegExpMatcher_1.RegExpMatcher.make(expected)
    },
    any: () => AnyMatcher_1.AnyMatcher.make(),
    anyOf: (matchers) => AnyOfMatcher_1.AnyOfMatcher.make(matchers),
    allOf: (matchers) => AllOfMatcher_1.AllOfMatcher.make(matchers),
    optional: (matcher) => OptionalMatcher_1.OptionalMatcher.make(matcher),
    optionalNull: (matcher) => OptionalNullMatcher_1.OptionalNullMatcher.make(matcher),
    not: (matcher) => NotMatcher_1.NotMatcher.make(matcher),
    instanceOf: (expected) => instanceOfMatcher_1.instanceOfMatcher.instanceOf(expected),
    ofType: {
        object: () => PredicateMatcher_1.PredicateMatcher.make(ofType_1.ofType.isObject, "ofType.object"),
        array: () => PredicateMatcher_1.PredicateMatcher.make(ofType_1.ofType.isArray, "ofType.array"),
        function: () => PredicateMatcher_1.PredicateMatcher.make(ofType_1.ofType.isFunction, "ofType.function"),
        string: () => PredicateMatcher_1.PredicateMatcher.make(ofType_1.ofType.isString, "ofType.string"),
        number: () => PredicateMatcher_1.PredicateMatcher.make(ofType_1.ofType.isNumber, "ofType.number"),
        boolean: () => PredicateMatcher_1.PredicateMatcher.make(ofType_1.ofType.isBoolean, "ofType.boolean"),
        regExp: () => PredicateMatcher_1.PredicateMatcher.make(ofType_1.ofType.isRegExp, "ofType.regExp"),
        symbol: () => PredicateMatcher_1.PredicateMatcher.make(ofType_1.ofType.isSymbol, "ofType.symbol"),
        enum: (enumeration, enumName = 'enum') => exports.match.predicate(v => !!Object.values(enumeration).find(e => e === v), enumName)
    },
    predicate: (predicate, description = { predicateFailed: PrettyPrinter_1.PrettyPrinter.functionDetails(predicate) }) => PredicateMatcher_1.PredicateMatcher.make(predicate, description),
    mapped: (map, matcher, description) => MappedMatcher_1.MappedMatcher.make(map, matcher, description),
    bind: (matcher) => BindMatcher_1.BindMatcher.make(matcher),
    describeContext: (describeContext, matcher) => DescribeContextMatcher_1.DescribeContextMatcher.make(describeContext, matcher),
    describe: (matcher, description) => DescribeMatcher_1.DescribeMatcher.make(matcher, description),
    decompiledActual: (actual, contributors, enums = {}) => (0, decompileActual_1.decompiledActual)(actual, contributors, enums)
};
//# sourceMappingURL=match.js.map