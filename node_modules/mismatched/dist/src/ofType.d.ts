declare function isUndefined(v: any): v is undefined;
declare function isDefined<T>(v: T | undefined): v is T;
declare function isNull(v: any): v is null;
declare function isObject(v: any): v is object;
declare function isArray(v: any): v is any[];
declare function isFunction(v: any): boolean;
declare function isSet(v: any): v is Set<any>;
declare function isMap(v: any): v is Map<any, any>;
declare function isString(v: any): v is string;
declare function isNumber(v: any): v is number;
declare function isNaN(v: any): boolean;
declare function isBoolean(v: any): v is boolean;
declare function isRegExp(v: any): v is RegExp;
declare function isSymbol(v: any): v is symbol;
declare function isMatcher(v: any): boolean;
declare function isError(v: any): v is Error;
export declare const ofType: {
    isArray: typeof isArray;
    isSet: typeof isSet;
    isMap: typeof isMap;
    isBoolean: typeof isBoolean;
    isError: typeof isError;
    isFunction: typeof isFunction;
    isMatcher: typeof isMatcher;
    isNaN: typeof isNaN;
    isNumber: typeof isNumber;
    isNull: typeof isNull;
    isObject: typeof isObject;
    isRegExp: typeof isRegExp;
    isString: typeof isString;
    isSymbol: typeof isSymbol;
    isUndefined: typeof isUndefined;
    isDefined: typeof isDefined;
};
export {};
