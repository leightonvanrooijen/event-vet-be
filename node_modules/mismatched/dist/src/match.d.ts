import { DiffMatcher } from "./matcher/DiffMatcher";
export declare const match: {
    isEquals: (expected: any) => any;
    itIs: (expected: any) => any;
    array: {
        match: (expected: Array<DiffMatcher<any> | any>) => any;
        contains: (expected: DiffMatcher<any> | any) => any;
        every: (expected: DiffMatcher<any> | any) => any;
        length: (expected: number) => any;
        unordered: (expected: Array<DiffMatcher<any> | any>) => any;
        unorderedContains: (expected: Array<DiffMatcher<any> | any>) => any;
    };
    aSet: {
        match: (expected: Set<DiffMatcher<any>> | Set<any> | Array<any> | Map<any, any>) => any;
        subset: (expected: Set<DiffMatcher<any>> | Set<any> | Array<any> | Map<any, any>) => any;
    };
    obj: {
        match: (obj: object) => any;
        has: (expected: Array<DiffMatcher<any>> | object) => any;
        key: (expected: any) => any;
    };
    string: {
        match: (expected: string | RegExp) => any;
        startsWith: (expected: string) => any;
        endsWith: (expected: string) => any;
        includes: (expected: string) => any;
    };
    uuid: () => any;
    number: {
        nan: () => any;
        less: (expected: number) => any;
        lessEqual: (expected: number) => any;
        greater: (expected: number) => any;
        greaterEqual: (expected: number) => any;
        withinDelta: (expected: number, delta: number) => any;
    };
    regEx: {
        match: (expected: RegExp) => any;
    };
    any: () => any;
    anyOf: (matchers: Array<DiffMatcher<any> | any>) => any;
    allOf: (matchers: Array<DiffMatcher<any> | any>) => any;
    optional: (matcher: DiffMatcher<any> | any) => any;
    optionalNull: (matcher: DiffMatcher<any> | any) => any;
    not: (matcher: DiffMatcher<any> | any) => any;
    instanceOf: (expected: Function) => any;
    ofType: {
        object: () => any;
        array: () => any;
        function: () => any;
        string: () => any;
        number: () => any;
        boolean: () => any;
        regExp: () => any;
        symbol: () => any;
        enum: (enumeration: any, enumName?: string) => any;
    };
    predicate: (predicate: (v: any) => boolean, description?: any) => any;
    mapped: (map: (t: any) => any, matcher: DiffMatcher<any> | any, description: any) => any;
    bind: (matcher?: DiffMatcher<any> | any) => any;
    describeContext: (describeContext: (outerContext: string, actual: any) => string, matcher: DiffMatcher<any> | any) => any;
    describe: (matcher: DiffMatcher<any> | any, description: (actual: any, context: string) => string) => any;
    decompiledActual: (actual: any, contributors: object, enums?: object) => any;
};
