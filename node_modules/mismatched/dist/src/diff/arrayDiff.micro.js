"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const arrayDiff_1 = require("./arrayDiff");
const assertThat_1 = require("../assertThat");
const match_1 = require("../match");
const prelude_ts_1 = require("prelude-ts");
const isMatcher = (matcher) => prelude_ts_1.Option.of(match_1.match.itIs(matcher));
describe("arrayDiff", () => {
    it("is empty", () => {
        const result = (0, arrayDiff_1.arrayDiff)([], []);
        (0, assertThat_1.assertThat)([]).is([]);
        (0, assertThat_1.assertThat)(result).is([]);
    });
    it("is same", () => {
        const matcher = match_1.match.isEquals(1);
        const actual = 1;
        const result = (0, arrayDiff_1.arrayDiff)([matcher], [actual]);
        (0, assertThat_1.assertThat)(result).is([{ actual: prelude_ts_1.Option.of(actual), actualIndex: 0, matcher: isMatcher(matcher) }]);
    });
    it("is same with undefined", () => {
        (0, assertThat_1.assertThat)(new prelude_ts_1.Some(undefined).getOrThrow()).is(undefined);
        const matcher = match_1.match.isEquals(undefined);
        const actual = undefined;
        const result = (0, arrayDiff_1.arrayDiff)([matcher], [actual]);
        (0, assertThat_1.assertThat)(result).is([{ actual: new prelude_ts_1.Some(actual), actualIndex: 0, matcher: isMatcher(matcher) }]);
    });
    it("is same with null", () => {
        (0, assertThat_1.assertThat)(new prelude_ts_1.Some(null).getOrThrow()).is(null);
        const matcher = match_1.match.isEquals(null);
        const actual = null;
        const result = (0, arrayDiff_1.arrayDiff)([matcher], [actual]);
        (0, assertThat_1.assertThat)(result).is([{ actual: new prelude_ts_1.Some(actual), actualIndex: 0, matcher: isMatcher(matcher) }]);
    });
    it("expected 1 but there were none", () => {
        const matcher = match_1.match.isEquals(1);
        const result = (0, arrayDiff_1.arrayDiff)([matcher], []);
        (0, assertThat_1.assertThat)(result).is([{ actual: prelude_ts_1.Option.none(), matcher: isMatcher(matcher) }]);
    });
    it("expected none but there was one", () => {
        const actual = 1;
        const result = (0, arrayDiff_1.arrayDiff)([], [actual]);
        (0, assertThat_1.assertThat)(result).is([{ actual: prelude_ts_1.Option.of(actual), actualIndex: 0, matcher: prelude_ts_1.Option.none() }]);
    });
    it("expected a 1 but there was a 2", () => {
        const matcher = match_1.match.isEquals(1);
        const actual = 2;
        const result = (0, arrayDiff_1.arrayDiff)([matcher], [actual]);
        (0, assertThat_1.assertThat)(result).is([
            { actual: prelude_ts_1.Option.of(actual), actualIndex: 0, matcher: prelude_ts_1.Option.none() },
            { actual: prelude_ts_1.Option.none(), matcher: isMatcher(matcher) }
        ]);
    });
    it("expected a 1 but there was an undefined", () => {
        const matcher = match_1.match.isEquals(1);
        const actual = undefined;
        const result = (0, arrayDiff_1.arrayDiff)([matcher], [actual]);
        (0, assertThat_1.assertThat)(result).is([{ actual: new prelude_ts_1.Some(actual), actualIndex: 0, matcher: prelude_ts_1.Option.none() },
            { actual: prelude_ts_1.Option.none(), matcher: isMatcher(matcher) }]);
    });
    it("expected an undefined but there was a 1", () => {
        const matcher = match_1.match.isEquals(undefined);
        const actual = 1;
        const result = (0, arrayDiff_1.arrayDiff)([matcher], [actual]);
        (0, assertThat_1.assertThat)(result).is([{ actual: prelude_ts_1.Option.of(actual), actualIndex: 0, matcher: prelude_ts_1.Option.none() },
            { actual: prelude_ts_1.Option.none(), matcher: isMatcher(matcher) }]);
    });
    it("expected 1, 2 but there was a 1", () => {
        const matcher1 = match_1.match.isEquals(1);
        const matcher2 = match_1.match.isEquals(2);
        const actual = 1;
        const result = (0, arrayDiff_1.arrayDiff)([matcher1, matcher2], [actual]);
        (0, assertThat_1.assertThat)(result).is([
            { actual: prelude_ts_1.Option.of(actual), actualIndex: 0, matcher: isMatcher(matcher1) },
            { actual: prelude_ts_1.Option.none(), matcher: isMatcher(matcher2) }
        ]);
    });
    it("expected 1, 2 but there was a 2", () => {
        const matcher1 = match_1.match.isEquals(1);
        const matcher2 = match_1.match.isEquals(2);
        const actual = 2;
        const result = (0, arrayDiff_1.arrayDiff)([matcher1, matcher2], [actual]);
        (0, assertThat_1.assertThat)(result).is([
            { actual: prelude_ts_1.Option.none(), matcher: isMatcher(matcher1) },
            { actual: prelude_ts_1.Option.of(actual), actualIndex: 0, matcher: isMatcher(matcher2) }
        ]);
    });
    it("expected 1, 2 but there was a 1, 3", () => {
        const matcher1 = match_1.match.isEquals(1);
        const matcher2 = match_1.match.isEquals(2);
        const actual1 = 1;
        const actual2 = 3;
        const result = (0, arrayDiff_1.arrayDiff)([matcher1, matcher2], [actual1, actual2]);
        (0, assertThat_1.assertThat)(result).is([
            { actual: prelude_ts_1.Option.of(actual1), actualIndex: 0, matcher: isMatcher(matcher1) },
            { actual: prelude_ts_1.Option.of(actual2), actualIndex: 1, matcher: prelude_ts_1.Option.none() },
            { actual: prelude_ts_1.Option.none(), matcher: isMatcher(matcher2) }
        ]);
    });
    it("expected 1, 2 but there was a 1, undefined", () => {
        const matcher1 = match_1.match.isEquals(1);
        const matcher2 = match_1.match.isEquals(2);
        const actual1 = 1;
        const actual2 = undefined;
        const result = (0, arrayDiff_1.arrayDiff)([matcher1, matcher2], [actual1, actual2]);
        (0, assertThat_1.assertThat)(result).is([
            { actual: prelude_ts_1.Option.of(actual1), actualIndex: 0, matcher: isMatcher(matcher1) },
            { actual: prelude_ts_1.Option.of(actual2), actualIndex: 1, matcher: prelude_ts_1.Option.none() },
            { actual: prelude_ts_1.Option.none(), matcher: isMatcher(matcher2) }
        ]);
    });
    it("expected 2, undefined but there was a 1, undefined", () => {
        const matcher1 = match_1.match.isEquals(2);
        const matcher2 = match_1.match.isEquals(undefined);
        const actual1 = 1;
        const actual2 = undefined;
        const result = (0, arrayDiff_1.arrayDiff)([matcher1, matcher2], [actual1, actual2]);
        (0, assertThat_1.assertThat)(result).is([
            { actual: prelude_ts_1.Option.of(actual1), actualIndex: 0, matcher: prelude_ts_1.Option.none() },
            { actual: prelude_ts_1.Option.none(), matcher: isMatcher(matcher1) },
            { actual: prelude_ts_1.Option.of(actual2), actualIndex: 1, matcher: isMatcher(matcher2) }
        ]);
    });
    it("expected a {f:1} but there was a {f:2}", () => {
        const matcher = match_1.match.obj.match({ f: 1 });
        const actual = { f: 2 };
        const result = (0, arrayDiff_1.arrayDiff)([matcher], [actual]);
        (0, assertThat_1.assertThat)(result).is([{ actual: prelude_ts_1.Option.of(actual), actualIndex: 0, matcher: prelude_ts_1.Option.none() },
            { actual: prelude_ts_1.Option.none(), matcher: isMatcher(matcher) }]);
    });
    it("expected a [0] but there was a [2]", () => {
        const matcher = match_1.match.array.match([0]);
        const actual = [2];
        const result = (0, arrayDiff_1.arrayDiff)([matcher], [actual]);
        (0, assertThat_1.assertThat)(result).is([{ actual: prelude_ts_1.Option.of(actual), actualIndex: 0, matcher: prelude_ts_1.Option.none() },
            { actual: prelude_ts_1.Option.none(), matcher: isMatcher(matcher) }]);
    });
    it("expected a [0, 1] but there was a [0, 2]", () => {
        const matcher = match_1.match.array.match([0, 1]);
        const actual = [0, 2];
        const result = (0, arrayDiff_1.arrayDiff)([matcher], actual);
        (0, assertThat_1.assertThat)(result).is([{ actual: prelude_ts_1.Option.of(0), actualIndex: 0, matcher: prelude_ts_1.Option.none() },
            { actual: prelude_ts_1.Option.of(2), actualIndex: 1, matcher: prelude_ts_1.Option.none() },
            { actual: prelude_ts_1.Option.none(), matcher: match_1.match.any() }]);
    });
    it("expected a single key match that otherwise fails", () => {
        const matcher = match_1.match.obj.match({ id: match_1.match.obj.key(1), f: 1 });
        const actual = { id: 1, f: 2 };
        const result = (0, arrayDiff_1.arrayDiff)([matcher], [actual]);
        (0, assertThat_1.assertThat)(result).is([{ actual: prelude_ts_1.Option.of(actual), actualIndex: 0, matcher: isMatcher(matcher) }]);
    });
    it("expected a single key match that otherwise fails, along with unexpected before and after", () => {
        const matcher = match_1.match.obj.match({ id: match_1.match.obj.key(1), f: 1 });
        const actual2 = { id: 1, f: 2 };
        const result = (0, arrayDiff_1.arrayDiff)([matcher], [10, actual2, 20]);
        (0, assertThat_1.assertThat)(result).is([
            { actual: prelude_ts_1.Option.of(10), actualIndex: 0, matcher: prelude_ts_1.Option.none() },
            { actual: prelude_ts_1.Option.of(actual2), actualIndex: 1, matcher: isMatcher(matcher) },
            { actual: prelude_ts_1.Option.of(20), actualIndex: 2, matcher: prelude_ts_1.Option.none() }
        ]);
    });
    it("expected a single key match that otherwise fails, along with expected before and after", () => {
        const matcher1 = match_1.match.isEquals(30);
        const matcher2 = match_1.match.obj.match({ id: match_1.match.obj.key(1), f: 1 });
        const matcher3 = match_1.match.isEquals(40);
        const actual = { id: 1, f: 2 };
        const result = (0, arrayDiff_1.arrayDiff)([matcher1, matcher2, matcher3], [actual]);
        (0, assertThat_1.assertThat)(result).is([
            { actual: prelude_ts_1.Option.none(), matcher: isMatcher(matcher1) },
            { actual: prelude_ts_1.Option.of(actual), actualIndex: 0, matcher: isMatcher(matcher2) },
            { actual: prelude_ts_1.Option.none(), matcher: isMatcher(matcher3) }
        ]);
    });
    it("expected a single key match that otherwise fails, along with mix before and after", () => {
        const matcherA = match_1.match.isEquals('A');
        const matcher1 = match_1.match.isEquals(30);
        const matcherB = match_1.match.isEquals('B');
        const matcher2 = match_1.match.obj.match({ id: match_1.match.obj.key(1), f: 1 });
        const matcher3 = match_1.match.isEquals(40);
        const actual = { id: 1, f: 2 };
        const result = (0, arrayDiff_1.arrayDiff)([matcherA, matcher1, matcherB, matcher2, matcher3], [actual]);
        (0, assertThat_1.assertThat)(result).is([
            { actual: prelude_ts_1.Option.none(), matcher: isMatcher(matcherA) },
            { actual: prelude_ts_1.Option.none(), matcher: isMatcher(matcher1) },
            { actual: prelude_ts_1.Option.none(), matcher: isMatcher(matcherB) },
            { actual: prelude_ts_1.Option.of(actual), actualIndex: 0, matcher: isMatcher(matcher2) },
            { actual: prelude_ts_1.Option.none(), matcher: isMatcher(matcher3) }
        ]);
    });
});
//# sourceMappingURL=arrayDiff.micro.js.map