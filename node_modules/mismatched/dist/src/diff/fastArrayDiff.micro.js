"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const diff = require("fast-array-diff");
const assertThat_1 = require("../assertThat");
describe("fast-array-diff", () => {
    it("try", () => {
        const es = diff.getPatch([1, 2, 2.5, 3, 5], [2, 3, 4], compare);
        (0, assertThat_1.assertThat)(es).is([
            { type: 'remove', oldPos: 0, newPos: 0, items: [1] },
            { type: 'remove', oldPos: 2, newPos: 1, items: [2.5] },
            { type: 'remove', oldPos: 4, newPos: 2, items: [5] },
            { type: 'add', oldPos: 5, newPos: 2, items: [4] }
        ]);
    });
    it("string", () => {
        const actuals = Array.from("abcEFGij");
        const expecteds = Array.from("bcdefhi");
        const deltas = diff.getPatch(expecteds, actuals, compare);
        (0, assertThat_1.assertThat)(deltas).is([
            { type: "add", oldPos: 0, newPos: 0, items: ["a"] },
            { type: "remove", oldPos: 2, newPos: 2, items: ["d", "e", "f", "h"] },
            { type: "add", oldPos: 6, newPos: 3, items: ["E", "F", "G"] },
            { type: "add", oldPos: 7, newPos: 7, items: ["j"] }
        ]);
        expecteds.splice(0, 0, "[a]"); // add
        expecteds.splice(2 + 1, 0, "<"); // remove start
        expecteds.splice(2 + 1 + 4 + 1, 0, ">"); // remove end
        expecteds.splice(2 + 1 + 4 + 1 + 1, 0, "[EFG]"); // add
        expecteds.splice(2 + 1 + 4 + 1 + 1 + 3, 0, "[j]"); // add
        const result = expecteds.join("");
        // Was                          "bcdefhi"
        (0, assertThat_1.assertThat)(result).is("[a]bc<defh>[EFG]i[j]");
    });
});
function compare(a, b) {
    return a === b;
}
//# sourceMappingURL=fastArrayDiff.micro.js.map