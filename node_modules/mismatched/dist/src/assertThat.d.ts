import { DiffMatcher } from "./matcher/DiffMatcher";
export declare function assertThat<T>(actual: T): Assertion<T>;
declare class Assertion<T> {
    private actual;
    private message;
    constructor(actual: any);
    withMessage(failMessage: string): this;
    is(expected: T): void;
    itIs(expected: T): void;
    isNot<T = any>(expected: T): void;
    isAnyOf(expected: Array<DiffMatcher<T> | any>): void;
    isAllOf(expected: Array<DiffMatcher<T> | any>): void;
    failsWith(expected: any, message: object): void;
    failsWithRendering(expected: any, rendered: string): void;
    throws(expected?: any): void;
    throwsError(message: string): void;
    catches(expected?: any): Promise<unknown>;
    catchesError(message: string): Promise<unknown>;
    logExceptionFail(message: string, matcher: DiffMatcher<any>): void;
    private match;
    private checkForFunction;
}
export declare function ensureNotFunction(actual: any): void;
export declare function assertException<T>(fn: () => any): ExceptionAssertion<unknown>;
declare class ExceptionAssertion<T> {
    private fn;
    constructor(fn: () => any);
    catchWithMessage(expected: T): void;
    catch(expected: T): void;
}
export {};
